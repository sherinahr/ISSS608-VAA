[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello there, my name is Sherinah!\nI am currently taking the Visual Analytics and Applications course in SMU.\nIn this website, you will find my attempts at completing the coursework, and I hope you will find it informative and aesthetically pleasing!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "1.2.1 Install and launch R packages",
    "text": "1.2.1 Install and launch R packages\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\nThe code chunk below uses p_load() of pacman package to check if tidyverse package is installed.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "1.2.2 Importing the Data",
    "text": "1.2.2 Importing the Data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, part of the tidyverse package.\n\n\nexam_data <-read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "1.3.1 R Graphics vs ggplot",
    "text": "1.3.1 R Graphics vs ggplot\nLet’s compare how R Graphics and ggplot a simple histogram.\n\nR Graphicsggplot\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"white\", \n                 fill=\"lightpink2\") +\n  ggtitle(\"Distribution of Maths Scores\") +theme_classic() \n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. There are seven grammars of ggplot2:\n\nData: The dataset being plotted\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots)\nStatistics, statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic\nThemes modify all non-data components of a plot, such as main title, sub-title, y-axis title, or legend background"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y-axis scale is not very useful and in fact, is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "1.7.3 Geometric Objects: geom_histogram",
    "text": "1.7.3 Geometric Objects: geom_histogram\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1",
    "section": "1.7.4 Modifying a geometric object by changing geom",
    "text": "1.7.4 Modifying a geometric object by changing geom\nIn the code chunk below:\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with pastel blue color,\ncolor argument is used to change the outline colour of the bars in black, and\ntheme_classic() is used to make the background minimalist.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"white\",      \n                 fill=\"slategray1\") + theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1",
    "section": "1.7.5 Modifying a geometric object by changing aes",
    "text": "1.7.5 Modifying a geometric object by changing aes\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nlibrary(viridis)  \n\nLoading required package: viridisLite\n\nggplot(data=exam_data, \n       aes(x= MATHS, fill= GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\") +   theme_classic() +\n  scale_fill_hue(l=80, c=80)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour and fill of the geometric object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1",
    "section": "1.7.6 Geometric Objects: geom-density",
    "text": "1.7.6 Geometric Objects: geom-density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays the list of continuous values. It visualises five summary statistics (the median, two hinges and two whiskers), and all outlier points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER, fill = GENDER)) +    \n  geom_boxplot() + theme_classic() +\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER, fill = GENDER)) +    \n  geom_boxplot(notch=TRUE) + theme_classic() +\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in a violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER, fill = GENDER)) +\n  geom_violin() + theme_classic() +\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "1.7.9 Geometric Objects: geom_point",
    "text": "1.7.9 Geometric Objects: geom_point\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH, color=GENDER)) +\n  geom_point() + theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER, fill=GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5) + theme_classic() +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---stat_summary-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.1 Working with stat() - stat_summary method",
    "text": "1.8.1 Working with stat() - stat_summary method\nThe boxplots above in Section 1.7.7 were incomplete because the positions of the means were not shown. The code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER, fill = GENDER)) +    \n  geom_boxplot() + theme_classic() +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"black\",        \n               size=2)+\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---geom-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.2 Working with stat() - geom() method",
    "text": "1.8.2 Working with stat() - geom() method\nThe code chunk below adding mean values by using geom() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER, fill = GENDER)) +    \n  geom_boxplot() + theme_classic() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"black\",          \n             size=2) +\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "1.8.3 Adding a best-fit curve on a scatterplot",
    "text": "1.8.3 Adding a best-fit curve on a scatterplot\nThe scatterplot above in Section 1.7.9 showed the relationship of Maths and English grades of pupils. The interpretability of the graph can be improved by adding a best fit curve. In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point() + theme_classic() +\n  geom_smooth(linewidth=0.5)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point() + theme_classic() +\n  geom_smooth(method=lm, linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.The code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, fill=\"salmon\") + theme_classic() +\n  facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "title": "Hands-on Exercise 1",
    "section": "1.9.2 Working with facet_grid()",
    "text": "1.9.2 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.The code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, fill=\"salmon\") + theme_classic() +\n  facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form. Adding coord_flip() flips the horizontal bar chart into a vertical bar chart.\n\nggplot(data = exam_data, \n       aes(x = RACE, fill= RACE)) + \n  geom_bar() +\n  xlab (\"Race\") +\n  ylab(\"Number of Students\") +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  theme_classic() + \n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\nThe scatterplot in Section 1.7.9 is slightly misleading because the y-axis and x-axis ranges are not equal. See below for the amended code block.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point() + theme_classic() +\n  geom_smooth(method=lm, linewidth=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on_Ex02",
    "section": "2.2.1 Installing and loading the required libraries",
    "text": "2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on_Ex02",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\nFor the purpose of this exercise, as in Hands-on Exercise 1, a data file called Exam_data will be used.\n\nexam_data <-read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on_Ex02",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others. In the example below, The Economist theme is used.It also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthemes-package",
    "title": "Hands-on_Ex02",
    "section": "2.4.2 Working with hrbthemes package",
    "text": "2.4.2 Working with hrbthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nThe axis_title_size argument is used to increase the font size of the axis title to 18\nThe base_size argument is used to increase the default axis label to 15\nThe grid argument is used to remove the x-axis grid lines"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-on_Ex02",
    "section": "2.5.1 Creating Composite Graphics: Patchwork methods",
    "text": "2.5.1 Creating Composite Graphics: Patchwork methods\nThere are several ggplot2 extension’s functions to support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, an ggplot2 extension called patchwork will be used to combine separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot is!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composites by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs\n“/” operator to place the plots beside each other\n“()” operator the define the sequence of the plotting\n\nTo learn more about, refer to Plot Assembly.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) &\n  theme(title=element_text(size=7, face ='bold'))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Ex02",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\ngrid <- ((p1 / p2) | p3) + plot_annotation(tag_levels = 'I') \ngrid & theme(title=element_text(size=7, face ='bold'))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on_Ex02",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout, with inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\np12 <- p1|p2\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on_Ex02",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist() + theme(title=element_text(size = 6, face ='bold'), \n                                      axis.title.y=element_text(size = 9), axis.title.x=element_text(size = 9))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Using p_load() of pacman package to load tidyverse.\n\npacman::p_load(tidyverse)\n\nImporting the data.\n\nexam_data <-read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#working-with-theme",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#working-with-theme",
    "title": "In-class Exercise 1",
    "section": "1.2 Working with theme",
    "text": "1.2 Working with theme\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() + \n  theme(panel.background = element_rect(fill = \"#ADD8E6\",\n                                linewidth = 2, linetype = \"solid\"),\n  panel.grid.major = element_line(linewidth = 0.5, \n                                  linetype = 'solid',\n                                colour = \"white\"), \n  panel.grid.minor = element_line(linewidth = 0.25, \n                                  linetype = 'solid',\n                                colour = \"white\"))+\n  coord_flip()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-i",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-i",
    "title": "In-class Exercise 1",
    "section": "1.3 Designing Data-drive Graphics for Analysis I",
    "text": "1.3 Designing Data-drive Graphics for Analysis I\n\n1.3.1 The original design\nA simple vertical bar chart for frequency analysis. Critical analysis:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequencies.\nFor static graph, frequency values should be added to provide additional information.\n\n\n\n\n\n\n\n\n1.3.2 Makeover!\n\nThe makeover designThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x= reorder (RACE,RACE,\n                           function(x)-length(x)))) +\n  geom_bar() + \n  ylim(0, 220) +\n  xlab (\"Race\") +\n  ylab(\"Number of Students\") +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100, 1), \"%\")),\n      vjust=-1)\n\n\n\n\nAlternatively, this code chunk uses fct_infreq() of forcats package.\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-ii",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-ii",
    "title": "In-class Exercise 1",
    "section": "1.4 Designing Data-drive Graphics for Analysis II",
    "text": "1.4 Designing Data-drive Graphics for Analysis II\n\n1.4.1 The original design\nA histogram of the Math scores:\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20)    \n\n\n\n\n\n\n1.4.2 Makeover!\n\nThe makeover designThe code chunk\n\n\n\nAdding mean and median lines on the histogram plot.\nChange fill and line color\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20, fill=\"lightblue\", color =\"black\") +\n  geom_vline(aes(xintercept=mean(MATHS),\n            color=\"Mean\"), linetype=\"dashed\", size=1) + \n    geom_vline(aes(xintercept=median(MATHS),\n            color=\"Median\"), linetype=\"dashed\", size=1) +\n    scale_color_manual(name = \"Statistics\", \n                       values = c(Median = \"blue\", Mean = \"red\")) +\n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iii",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iii",
    "title": "In-class Exercise 1",
    "section": "1.5 Designing Data-drive Graphics for Analysis III",
    "text": "1.5 Designing Data-drive Graphics for Analysis III\n\n1.5.1 The original design\nThe histograms below are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram() +\n  facet_wrap(~ GENDER) \n\n\n\n\n\n\n1.5.2 Makeover!\n\nThe makeover designThe code chunk\n\n\nThe background histograms show the distribution of English scores for all pupils.\n\n\n\n\n\n\n\n\nd_bg <- exam_data[, -3]  \n\nggplot(exam_data, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iv",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iv",
    "title": "In-class Exercise 1",
    "section": "1.6 Designing Data-drive Graphics for Analysis IV",
    "text": "1.6 Designing Data-drive Graphics for Analysis IV\n\n1.6.1 The original design\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n1.6.2 Makeover!\n\nThe makeover designThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH)) +\n  geom_point() +\n  xlim(0,100) + \n  ylim(0,100) +\n  geom_hline(yintercept = 50, linetype=\"dashed\", \n             color = \"gray\", size=1) +\n  geom_vline(xintercept = 50, linetype=\"dashed\", \n             color = \"gray\", size=1)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to Sherinah’s page for Visual Analytics and Applications!\nIn this website, you will find my attempts at completing the coursework, and I hope you will find it informative and aesthetically pleasing~"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Demographic & Financial Analysis of City of Engagement",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.\nThis take-home exercise will explore the demographic and financial characteristics of the city of Engagement using static and interactive statistical graphics methods. The data will be processed using the tidyverse family of packages and the visualisations developed using ggplot2 and its extensions.\nSpecifically, this exercise seeks to answer the following using Exploratory & Confirmatory Data Analysis: What influences happiness?\n\n\n\nTwo data sets in csv format are provided for the purpose of this exercise - Participants & Financial Journal.\n\n\nThis dataset contains information about the residents of City of Engagement that have agreed to participate in this study and comprises the following fields:\n\nData Fields - Participants.csv\n\n\n\n\n\n\nField\nDescription\n\n\n\n\nparticipantId (integer)\nUnique ID assigned to each participant\n\n\nhouseholdSize (integer)\nNumber of people in the household\n\n\nhaveKids (boolean)\nPresence of children in the household\n\n\nage (integer)\nParticipant’s age in years at the start of the study\n\n\neducationLevel\n(string factor)\nParticipant’s education level\n[Low, HighSchoolorCollege, Bachelors, Graduate]\n\n\ninterestGroup (char)\nCharacter representing the participant’s stated primary interest group [A,B,C,D,E,F,G,H,I,J]\n\n\njoviality (float)\nValue ranging from [0,1] indicating the participant’s overall happiness level at the start of the study\n\n\n\n\n\n\nThis dataset contains information about the residents of City of Engagement that have agreed to participate in this study and comprises the following fields:\n\nData Fields - FinancialJournal.csv\n\n\n\n\n\n\nField\nDescription\n\n\n\n\nparticipantId (integer)\nUnique ID assigned to each participant\n\n\ntimestamp (datetime)\nTime when the check-in was logged\n\n\ncategory\n(string factor)\nString describing the expense category\n[Education, Food, Recreation, RentAdjustment, Shelter, Wage]\n\n\namount (double)\nAmount of the transaction\n\n\n\n\n\n\nThere are a few data quality issues with the datasets:\n\nThe timestamp information in the FinancialJournal.csv is too granular and should be changed to reflect the month and year instead.\nA quick analysis showed that there were duplicates in the data; these will be removed to ensure the data will not be skewed.\nThe quick analysis also highlighted that there were some participants who did not have entries for all 6 months; it is possible that they are no longer residents of the City. Since the aim of this exercise is to explore the financial trends of the residents, these participants will be removed.\nThe data is on an individual level and thus will be aggregated accordingly for the analyses.\nThe data types have to be checked as well.\nAfter addressing the above issues, the datasets should be combined to ensure a comprehensive and accurate analysis.\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to ensure that the datasets have been comprehensively cleaned prior to conducting analyses, to ensure our visualisations are accurate and informative!"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-preparation",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-preparation",
    "title": "Demographic & Financial Analysis of City of Engagement",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n2.1 Install and Launch R packages\nIn this exercise, the following packages will be used: tidyverse, ggplot2, dplyr, patchwork, ggthemes, hrbrthemes, and ggrepel. The codechunk below will be used to check if these packages have been installed and also will load them onto the working R environment:\n\n\nShow code\npacman::p_load(patchwork, ggplot2, dplyr, rstatix, gt,\n               gganimate, gifski, png, zoo, DT, ggjoy, PMCMRplus,\n               tidyverse, ggstatsplot, plotly) \n\n\n\n\n2.2 Import Datasets\nThe code chunk below imports the datasets into R environment by using read_csv() function of readr package as part of tidyverse.\n\n\nShow code\nppt <-read_csv(\"data/Participants.csv\", show_col_types = FALSE)\nfj <- read_csv(\"data/FinancialJournal.csv\", show_col_types = FALSE)\n\n\nThe summary and spec() function is used to provide an overview of the central tendencies, and data types of the datasets.\n\n\nShow code\nsummary(ppt)\n\n\n participantId    householdSize    haveKids            age       \n Min.   :   0.0   Min.   :1.000   Mode :logical   Min.   :18.00  \n 1st Qu.: 252.5   1st Qu.:1.000   FALSE:710       1st Qu.:29.00  \n Median : 505.0   Median :2.000   TRUE :301       Median :39.00  \n Mean   : 505.0   Mean   :1.964                   Mean   :39.07  \n 3rd Qu.: 757.5   3rd Qu.:3.000                   3rd Qu.:50.00  \n Max.   :1010.0   Max.   :3.000                   Max.   :60.00  \n educationLevel     interestGroup        joviality       \n Length:1011        Length:1011        Min.   :0.000204  \n Class :character   Class :character   1st Qu.:0.240074  \n Mode  :character   Mode  :character   Median :0.477539  \n                                       Mean   :0.493794  \n                                       3rd Qu.:0.746819  \n                                       Max.   :0.999234  \n\n\nShow code\nspec(ppt)\n\n\ncols(\n  participantId = col_double(),\n  householdSize = col_double(),\n  haveKids = col_logical(),\n  age = col_double(),\n  educationLevel = col_character(),\n  interestGroup = col_character(),\n  joviality = col_double()\n)\n\n\n\n\nShow code\nsummary(fj)\n\n\n participantId      timestamp                        category        \n Min.   :   0.0   Min.   :2022-03-01 00:00:00.00   Length:1513636    \n 1st Qu.: 222.0   1st Qu.:2022-05-24 13:25:00.00   Class :character  \n Median : 464.0   Median :2022-08-25 15:00:00.00   Mode  :character  \n Mean   : 480.9   Mean   :2022-08-26 05:00:48.42                     \n 3rd Qu.: 726.0   3rd Qu.:2022-11-27 07:25:00.00                     \n Max.   :1010.0   Max.   :2023-02-28 23:55:00.00                     \n     amount         \n Min.   :-1562.726  \n 1st Qu.:   -5.594  \n Median :   -4.000  \n Mean   :   20.047  \n 3rd Qu.:   21.598  \n Max.   : 4096.526  \n\n\nShow code\nspec(fj)\n\n\ncols(\n  participantId = col_double(),\n  timestamp = col_datetime(format = \"\"),\n  category = col_character(),\n  amount = col_double()\n)\n\n\n\n\n2.3 Data Wrangling\n\n2.3.1 Participants Dataset\nThere are a few data quality issues:\nFirstly, the age variable is binned with the following code chunk. The mutate() function of dplyr is used to create a new variable called Age_Category while preserving the existing variable of age.\n\n\nShow code\nppt <- ppt %>%\n  mutate(Age_Category=cut(age, \n                          breaks=c(17, 20, 30, 40, 50, 60),\n                          labels=c('20 & Below', '21-30', '31-40', \n                                   '41-50', '51 and above')))\n\n# Check if the ages are reflected correctly\nhead(ppt$age)\nhead(ppt$Age_Category)\n\n\nNext, a few of the columns were not set to the appropriate data type. For example, participantID should be categorical but it shows as a continuous numeric variable. Further, we would need the education level to be read as an ordinal factor as there are levels for education. As above, the mutate() function will be used to update the data types.\n\n\nShow code\nppt <- ppt %>% mutate(participantId = as.factor(participantId))\nppt <- ppt %>% mutate(educationLevel = factor(educationLevel, \n                                              levels=c(\"Low\", \"HighSchoolOrCollege\", \"Bachelors\", \"Graduate\")))\n\n# Check data types\nstr(ppt)\n\n\nLastly, we will rename the other columns for nicer formatting and ease of reading with the below code chunk. As we are not making changes to the values, the column names will be amended in place.\n\n\nShow code\nppt <- ppt %>%\n  rename('ParticipantID' = 'participantId', \n         'HouseholdSize' = 'householdSize', \n         'EducationLevel' = 'educationLevel', \n         'InterestGroup' = 'interestGroup', \n         'Joviality' = 'joviality',\n         'HaveKids' = 'haveKids')\n\n# Check if the changes are reflected correctly\ncolnames(ppt)\n\n\n\n\n2.3.2 FinancialJournal Dataset\nAs stated in section 1.2.3 Challenges, there are a number of issues with the dataset.\nFirstly, the data type for participantId was changed as above.\n\n\nShow code\nfj <- fj %>% mutate(participantId = as.factor(participantId))\n\n# Check data types\nstr(fj)\n\n\nNext, there are some duplicate rows in the dataset which have to be removed using the distinct() function. As the code below shows, there were 1,113 duplicate rows in the FinancialJournal dataset.\n\n\nShow code\nfj_2 <- fj %>% distinct()\nnrow(fj) - nrow(fj_2)\n\n\n[1] 1113\n\n\nNext, there were some participants who did not have entries for all 6 months. To find the these participants, first the data was grouped by the participantId. Examination of the results show that there are 131 participants which have lower than 1,000 transactions.\n\n\nShow code\nfj_2 %>%\n  group_by(participantId) %>%\n  summarize(transaction_count = n()) %>%\n  arrange(transaction_count)\n\n\nThe code chunk below will filter out these 131 participants. The data frame fj_final now has no duplicates, and only residents who still live in City of Engagement.\n\n\nShow code\nfj_final <- subset(fj_2, with(fj_2, participantId %in% \n                            names(which(table(participantId)>=1000))))\nhead(fj_final)\n\n\nNext, we would want to convert all of the timestamp data into Month-Year format for ease of comparison using the first line of code. However, the result would be in character format which is not advisable for analysis, and so we will run the subsequent line of code to change it to Date format.\n\n\nShow code\nfj_final <- fj_final %>%\n  mutate (Year_month = as.yearmon(timestamp))\n\nfj_final <- transform(fj_final, Year_month = as.Date(Year_month, frac = 0))\n\nhead(fj_final)\n\n\n  participantId  timestamp  category     amount Year_month\n1             0 2022-03-01      Wage 2472.50756 2022-03-01\n2             0 2022-03-01   Shelter -554.98862 2022-03-01\n3             0 2022-03-01 Education  -38.00538 2022-03-01\n4             1 2022-03-01      Wage 2046.56221 2022-03-01\n5             1 2022-03-01   Shelter -554.98862 2022-03-01\n6             1 2022-03-01 Education  -38.00538 2022-03-01\n\n\nFurther, most of the values are negative as they reflect expenditures for food, education, recreation and shelter. The positive amounts are for wage and rent adjustment. The data will also be changed from long to wide format for easier reading using the pivot_wider() function.\n\n\nShow code\nfj_final$amount <- abs(fj_final$amount)\nfj_final$amount <- round(fj_final$amount,digits=0)\n\nfj_wide <- fj_final %>%\n  group_by(participantId, Year_month, category) %>%\n  summarise(Total = sum(amount)) %>%\n  pivot_wider(names_from = category, values_from = Total)\n\n# Replace NA values with 0 for Rent Adjustment\nfj_wide[is.na(fj_wide)] <- 0\n\nhead(fj_wide)\n\n\nTo find out the cost of living and total income of the residents, the values of the expenses for the four categories, and the wage and rent adjustment will be summed up respectively. We will also derive the total savings i.e. Total income - Cost of living.\n\n\nShow code\nfj_wide$Cost_of_living <- fj_wide$Education + \n  fj_wide$Food + fj_wide$Recreation + \n  fj_wide$Shelter\n\nfj_wide$Total_Income <- fj_wide$Wage + \n  fj_wide$RentAdjustment\n\nfj_wide$Total_Savings <- fj_wide$Total_Income - fj_wide$Cost_of_living\n\n\nLastly, we will rename the participantId column in place for consistency.\n\n\nShow code\nfj_wide <- fj_wide %>%\n  rename('ParticipantID' = 'participantId')\n\n# Check if the changes are reflected correctly\ncolnames(fj_wide)\n\n\n\n\n2.3.3 Combining the Datasets\nNow that data cleaning is done, let’s merge the datasets! We need to ensure that for the participants.csv, we only keep the distinct participants that were in our fj_wide csv. Let’s see what the final dataset looks like with the following code chunk.\n\n\nShow code\nmerged <- merge(fj_wide, ppt, by = \"ParticipantID\", all.x = TRUE)\n\nfinal <- subset(merged, ParticipantID %in% fj_wide$ParticipantID)\n\nDT::datatable(final, class = \"compact\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#visualisations-insights",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#visualisations-insights",
    "title": "Demographics & Financial Analysis of City of Engagement",
    "section": "3. Visualisations & Insights",
    "text": "3. Visualisations & Insights"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#key-takeaways",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#key-takeaways",
    "title": "Demographic & Financial Analysis of City of Engagement",
    "section": "Key Takeaways",
    "text": "Key Takeaways\nThe analyses have provided the following key takeaways:\n\nThe residents are quite evenly distributed in terms of age and household size. Most of the residents have at least high school or college education, and tend to have nuclear households.\nIn terms of financial health, it is possible that most residents are just getting by, as most residents earn below $3,000 and yet experience a cost of living of about half their income. Majority of their expenses are spent on shelter.\nInterestingly, residents who earned and saved more had lower scores for happiness than those who spent more. It is possible that residents who spent more are doing so on pursuits which bring them greater joy. There was also no difference in trend amongst different age groups.\nResidents with higher levels of education (Bachelors & Graduate) tended to be happier than those who had at least high school or college education.\nResidents tended to experience a dip in happiness as they age, though the dip is not severe and thus not a cause for concern.\nMarital status and having children did not have any influence on happiness level.\n\nOfficials may wish to conduct more life courses for the residents on topics such as financial planning, mental health and wellness programmes, and ensure that older residents are able to engage in activities and social support which can ensure their mental health and therefore improve their happiness as they continue to age."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "In today’s in class exercise, Prof shared with us how to combine a qqplot and tabular results of Shapiro test in a single plot."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#import-libraries",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#import-libraries",
    "title": "In-class_Ex04",
    "section": "Import libraries",
    "text": "Import libraries\nThe new libraries used today are :\n\nrstatic: Allows us to perform basic statistical tests, including t-test, Wilcoxon test, ANOVA, Kruskal-Wallis and correlation analyses.\ngt() : starting from a tibble table, customise a table and export in various formats. Most importantly, it works with patch. We will save the tabular results from shapiro test as gt object and export using gtsave() into .png file later.\nNote:\nImporting tidyverse: will automatically provide read_r() <- for read_csv()\n\n\npacman::p_load(rstatix, gt, patchwork,tidyverse,nortest,webshot2)\n\n\nexam <- read_csv('data/Exam_data.csv')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#background-info",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#background-info",
    "title": "In-class_Ex04",
    "section": "Background info",
    "text": "Background info\n\nThe Anderson_darling test\nUsually, when we check for normality of a distribution, we can use the Anderson-darling test or the Shapiro test. Hitting the three commands below will give us the results, but no visualisation.\n\nad.test(exam$ENGLISH)\n\n\n    Anderson-Darling normality test\n\ndata:  exam$ENGLISH\nA = 4.3661, p-value = 7.341e-11\n\n\n\n\nThe shapiro.test\nUsing shapiro.test will generate result as a HTML object.\n\nshapiro.test(exam$ENGLISH)\n\n\n    Shapiro-Wilk normality test\n\ndata:  exam$ENGLISH\nW = 0.9543, p-value = 1.811e-08\n\n\nUsing shapiro_test will generate result as a tibble object.\n\nexam %>% \n  shapiro_test(ENGLISH)\n\n# A tibble: 1 × 3\n  variable statistic            p\n  <chr>        <dbl>        <dbl>\n1 ENGLISH      0.954 0.0000000181\n\n\n\n\nQQplot\nWe can also generate the qqplot to check for normality. However qqplot does not print any p-values.\n\nggplot(exam,\n       aes(sample=ENGLISH)) +  #<<< use a new argument call sample: el scores\n  stat_qq() +\n  stat_qq_line()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#task-for-today",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#task-for-today",
    "title": "In-class_Ex04",
    "section": "Task for today:",
    "text": "Task for today:\n\nCombine qqplot with results from Shapiro-test.\nRecall that in hands-on 3, we use DT to create an interactive table , however it is not recognized by patchwork.\nWe start by storing the shapiro test in a tibble table as shown above. Then we will use the gt() package and export it as a .png using gtsave().\n\nqq <- ggplot(exam,\n       aes(sample=ENGLISH)) +  #<<< use a new argument call sample: el scores\n  stat_qq() +\n  stat_qq_line()\n\nsw_t <- exam %>% \n  shapiro_test(ENGLISH) %>% gt()   #<<< make into a gt format (will give a nice table)  shapiro.test is not used here as it gives output in another format.\n\ntmp <- tempfile(fileext = '.png') # create  temp table\ngtsave(sw_t, tmp)  # use gtsave() to save sw_t into tmp folder\ntable_png <- png::readPNG(tmp, native = TRUE)\n\nqq+table_png\n\n\n\n\nI tried to customise the gt() table.\n\nqq <- ggplot(exam,\n       aes(sample=ENGLISH)) +  #<<< use a new argument call sample: el scores\n  stat_qq() +\n  stat_qq_line()\n\nsw_t <- exam %>% \n  shapiro_test(ENGLISH) %>% gt()  %>%  \n  tab_header(\n    title = 'Shapiro Test for Normality',\n    subtitle = 'English scores')\n\ntmp <- tempfile(fileext = '.png') # create  temp table\ngtsave(sw_t, tmp)  # use gtsave() to save sw_t into tmp folder\ntable_png <- png::readPNG(tmp, native = TRUE)\n\nqq+table_png  # use patchwork to stitch\n\n\n\n\nThe results of the Shapiro test shows that p-value < 0.05 and we have enough statistical evidence to reject the null hypothesis and conclude that English scores do not follow normal distribution."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-Class Exercise 5",
    "section": "",
    "text": "Today’s hands-on exercise is about network visualisation, where four network data modelling and visualisation packages will be installed and launched."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#the-dataset",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#the-dataset",
    "title": "In-Class Exercise 5",
    "section": "1.1 The Dataset",
    "text": "1.1 The Dataset\nThe dataset used are from an oil exploration and extraction company. There are two data sets. One contains the data on nodes and the other contains the edges (also know as links) data.\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\nLet’s first load the packages and datasets to be used.\n\n\nShow code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\n\n\nShow code\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\", show_col_types = FALSE)\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#cleaning-the-dataset",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#cleaning-the-dataset",
    "title": "In-Class Exercise 5",
    "section": "1.2 Cleaning The Dataset",
    "text": "1.2 Cleaning The Dataset\nWe will examine the structure of the data frame using glimpse() of dplyr.\n\n\nShow code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. Before we continue, it is important for us to change the data type of SentDate field to “Date”” data type.The code chunk below will be used to perform the changes.\n\n\nShow code\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation. In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week. Take note to (i) ungroup after you have used the group_by() function so that you can alter how you want to use group_by() for subsequent code chunks, and (ii) filter only those records where the source does not equal to target to ensure only unique interactions will be visualised later.\n\n\nShow code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\nNow let’s review the aggregated dataset. It looks great, good job!\n\n\nShow code\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#network-objects",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#network-objects",
    "title": "In-Class Exercise 5",
    "section": "1.3 Network Objects",
    "text": "1.3 Network Objects\nWe will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame. Let’s review how the graph looks.\n\n\nShow code\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\nShow code\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands on Ex 5",
    "section": "",
    "text": "Today’s hands-on exercise is about network visualisation, where four network data modelling and visualisation packages will be installed and launched. The objectives are as follows:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dataset",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dataset",
    "title": "Hands on Ex 5",
    "section": "5.1 The Dataset",
    "text": "5.1 The Dataset\nThe dataset used are from an oil exploration and extraction company. There are two data sets. One contains the data on nodes and the other contains the edges (also know as links) data.\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\nLet’s first load the packages and datasets to be used.\n\n\nShow code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\n\n\nShow code\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\", show_col_types = FALSE)\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dataset-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dataset-1",
    "title": "Hands on Ex 5",
    "section": "1.2 The Dataset",
    "text": "1.2 The Dataset\nWe will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. Before we continue, it is important for us to change the data type of SentDate field to “Date”” data type.The code chunk below will be used to perform the changes.\n\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation. In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\nNow let’s review the aggregated dataset. It looks great, good job!\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "",
    "text": "This Take-Home Exercise is part of the VAST Challenge 2023. The country of Oceanus has sought FishEye International’s help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing. They hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it.\nFishEye knows from past experience that companies caught fishing illegally will shut down but will then often start up again under a different name. FishEye wants your help to visualize temporal patterns so they can compare the activities of companies over time to determine if the companies have returned to their nefarious acts.\nIn line with this, this page will attempt to answer the following task under Mini-Challenge 2 of the VAST Challenge:\nUse visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find. Limit your response to 600 words and 6 images."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-dataset",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-dataset",
    "title": "Take Home Ex 2",
    "section": "1.1 The Dataset",
    "text": "1.1 The Dataset\nThe dataset used is from the VAST Challenge 2023. Let’s first load the packages and dataset to be used.\n\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse)\n\n\n# The front part before :: is to load the package.\n\nMC1 <- jsonlite::fromJSON(\"data/MC1.json\")\n\nThe data is in list format but we need to change it into a tabular format. We also will use the select() function to reorganise the structure of the dataset.\n\nMC1_nodes <- as_tibble(MC1$nodes) %>%\n  select(id, type, country)\n\nMC1_edges <- as_tibble(MC1$links) %>% select(source, target, type, weight, key)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#visualisation",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#visualisation",
    "title": "Demographic & Financial Analysis of City of Engagement",
    "section": "Visualisation",
    "text": "Visualisation"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#what-influences-joviality",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#what-influences-joviality",
    "title": "Demographic & Financial Analysis of City of Engagement",
    "section": "3. What influences Joviality?",
    "text": "3. What influences Joviality?\nIn this section, we will first take a quick look at the demographic profile of the residents. Simple visualisations which show the distributions will be used, such as pie, line, and bar charts. Based on these, we will conduct confirmatory data analyses.\n\n3.1. Age & Education\nThe adult residents (aged 21 and above) are quite evenly distributed in the City. As for education level, almost half (48%) of the residents had at least high school or college education, and 45% had at least a Bachelor’s degree.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nShow code\n#Calculate the proportion of residents in each category\nage_category_proportion <- final %>%\n  count(Age_Category) %>%\n  mutate(prop = n/sum(n))\n\n#Plot the pie chart for Age Category\np1 <- ggplot(age_category_proportion, aes(x=\"\", y=prop, fill=Age_Category)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  ggtitle(\"Distribution of Age (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(fill =\"Age Category\")\n\n#Calculate the proportion of residents in each category\neducation_proportion <- final %>%\n  count(EducationLevel) %>%\n  mutate(prop = n/sum(n))\n\n#Plot the pie chart for Education level\np2 <- ggplot(education_proportion, aes(x=\"\", y=prop, fill=EducationLevel)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  ggtitle(\"Distribution of Education Level (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(fill =\"Education Level\")\n  \n(p1/p2)\n\n\n\n\n\n\n\n3.2. Household Size and Children\nResidents of the City tend to have nuclear households, with a maximum of 3 members in a household. From the pie chart, we can see that about one-third of the residents have children.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nShow code\n#Calculate proportion of residents in each category\nfinal$HouseholdSize <- as.factor(final$HouseholdSize)\nhousehold_proportion <- final %>%\n  count(HouseholdSize) %>%\n  mutate(prop = n / sum(n))\n\n#Plot the pie chart for HHsize Category\np1 <- ggplot(household_proportion, aes(x=\"\", y=prop, fill=HouseholdSize)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  ggtitle(\"Distribution of Households (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(fill =\"Household Size\")\n\n#Calculate proportion of residents for having kids\nfinal$HaveKids <- as.factor(final$HaveKids)\nkids_proportion <- final %>%\n  count(HaveKids) %>%\n  mutate(prop = n / sum(n))\n\n#Plot the pie chart for having kids\np2 <- ggplot(kids_proportion, aes(x=\"\", y=prop, fill=HaveKids)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  ggtitle(\"Distribution of Children in Households (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(fill =\"Have Children\")\n\np1 / p2\n\n\n\n\n\n\n\n3.3. Joviality\nOne of the aims of this analysis is to see what influences happiness."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#what-influences-income",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#what-influences-income",
    "title": "Demographic & Financial Analysis of City of Engagement",
    "section": "4. What influences income?",
    "text": "4. What influences income?\n\n4.1. Education and smth"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#demographic-financial-profiles",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#demographic-financial-profiles",
    "title": "Demographic & Financial Analysis of City of Engagement",
    "section": "Demographic & Financial Profiles",
    "text": "Demographic & Financial Profiles\nIn this section, we will first take a quick look at the demographic and financial profile of the residents. Simple visualisations which show the distributions will be used, such as pie, line, and bar charts. Based on these, we will conduct confirmatory data analyses to assess what influences happiness.\n\n3.1. Demographic: Age & Education\nThe adult residents (aged 21 and above) are quite evenly distributed in the City. As for education level, almost half (48%) of the residents had at least high school or college education, and 45% had at least a Bachelor’s degree.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n#Calculate the proportion of residents in each category\nage_category_proportion <- final %>%\n  count(Age_Category) %>%\n  mutate(prop = n/sum(n))\n\n#Plot the pie chart for Age Category\np1 <- ggplot(age_category_proportion, aes(x=\"\", y=prop, fill=Age_Category)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  ggtitle(\"Distribution of Age (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(fill =\"Age Category\")\n\n#Calculate the proportion of residents in each category\neducation_proportion <- final %>%\n  count(EducationLevel) %>%\n  mutate(prop = n/sum(n))\n\n#Plot the pie chart for Education level\np2 <- ggplot(education_proportion, aes(x=\"\", y=prop, fill=EducationLevel)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  ggtitle(\"Distribution of Education Level (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(fill =\"Education Level\")\n  \np1 / p2\n\n\n\n\n\n\n3.2. Demographic: Household Size and Children\nResidents of the City tend to have nuclear households, with a maximum of 3 members in a household. From the pie chart, we can see that about one-third of the residents have children.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n#Calculate proportion of residents in each category\nfinal$HouseholdSize <- as.factor(final$HouseholdSize)\nhousehold_proportion <- final %>%\n  count(HouseholdSize) %>%\n  mutate(prop = n / sum(n))\n\n#Plot the pie chart for HHsize Category\np1 <- ggplot(household_proportion, aes(x=\"\", y=prop, fill=HouseholdSize)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  ggtitle(\"Distribution of Households (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(fill =\"Household Size\")\n\n#Calculate proportion of residents for having kids\nfinal$HaveKids <- as.factor(final$HaveKids)\nkids_proportion <- final %>%\n  count(HaveKids) %>%\n  mutate(prop = n / sum(n))\n\n#Plot the pie chart for having kids\np2 <- ggplot(kids_proportion, aes(x=\"\", y=prop, fill=HaveKids)) +\n  geom_bar(stat=\"identity\", width=1, color=\"white\") +\n  coord_polar(\"y\", start=0) +\n  theme_void() +\n  geom_text(aes(label = paste0(round(prop*100), \"%\")), position = position_stack(vjust = 0.5), size = 3) +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  ggtitle(\"Distribution of Children in Households (%)\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  labs(fill =\"Have Children\")\n\np1 / p2\n\n\n\n\n\n\n3.3. Financial: Distribution of Total Income & Cost of Living\nThe line charts below show us an overview of the proportion of residents for the total income (as defined by the sum of wages and rent adjustment) and the cost of living. Both distributions are positively skewed i.e., mean is greater than the median. Majority of the residents have a total income of below $3,000 approximately, and have a cost of living of lower than $2,000.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n#Plot Total Income\ngg1<- ggplot(data=final, \n       aes(x = Total_Income)) +\n  geom_density(color=\"turquoise\",linewidth=1)+\n  theme_classic() +\n  theme(axis.text.y=element_blank(), axis.ticks.y=element_blank()) +\n  labs(x= \"Wage\",y= \"Density\",title=\"Distribution of Total Income\") \n\n#Plot Total Cost of Living\ngg2<- ggplot(data=final, \n       aes(x = Cost_of_living)) +\n  geom_density(color=\"skyblue1\",linewidth=1)+\n  theme_classic() +\n  theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())+\n  labs(x= \"Cost of Living\",y= \"Density\",title=\"Distribution of Cost of Living\") \n\ngg1 / gg2\n\n\n\n\nNext, let’s look at the trend of the total income and cost of living across the months using the animated graph below. We can see that primarily, monthly expenditures were fairly stable across months. As for total income, there was a spike in March 2022, but then returned to baseline amounts thereafter.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n#Change the ppt ID to numeric for continuous scale\np3 <- ggplot(final %>% mutate(ParticipantID = as.numeric(ParticipantID)),\n       aes(x = Total_Income, y = Cost_of_living, \n           size = Total_Income, \n           colour = ParticipantID)) +\n  geom_point(alpha = 0.5, \n             show.legend = FALSE) +\n  scale_color_gradientn(colours = rainbow(100)) +\n  scale_size(range = c(1, 6)) +\n  labs(title = 'Date: {frame_time}', \n       x = 'Total Income ($)',\n       y = 'Cost of Living ($)') +\n  transition_time(Year_month) +\n  theme_classic() +\n  ease_aes('linear')\n\n#Specify to animate within a specified duration\nanimate(p3, duration =20)\n\n\n\n\n\n\n3.4 Financial: Patterns of Cost of Living\nNow that we have seen the general trend of the total income and expenditures, let’s look at the patterns of cost of living. As we need the long format, we will first create a new table called Expenses from the fj_final table so as to isolate the specific expenditure categories.\n\n\nShow code\n#Create a Total column in fj_final and rename the dataframe\nfj_final2 <- fj_final %>%\n  group_by(participantId, Year_month, category) %>%\n  summarise(Total = sum(amount))\n\n#Create a new dataframe just for expenses\nexpenses <- fj_final2 %>%\n  filter(category != 'Wage') %>%\n  filter(category != 'RentAdjustment')\n\n#Check the values\nhead(expenses)\n\n\nWe can see from the boxplot below that most of the monthly expenditure was spent on shelter, followed by recreation, food, and lastly education.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data = expenses,\n       aes(x = category, y = Total, fill = category))+\n  geom_boxplot() +\n  xlab(\"Category of Expenditure\") +\n  ylab(\"Amount ($)\") +\n  ggtitle(\"Distribution of Monthly Expenses\") +\n  theme_classic() + \n  theme(legend.position = \"none\") +\n  scale_fill_brewer(palette=\"Pastel2\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#what-influences-happiness",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#what-influences-happiness",
    "title": "Demographic & Financial Analysis of City of Engagement",
    "section": "What influences Happiness?",
    "text": "What influences Happiness?\n\nJoviality\nNow that we have finished exploring the demographic and financial characteristics, let’s plot the distribution of joviality and assess if it meets the normality assumption. The Shapiro-Wilk test will be used. If the p-value is significant, the variable is not normally distributed. We will then determine what tests to carry out for our confirmatory data analyses.\n\n\n\n\n\n\nImportant\n\n\n\nWe need to test the normality assumption as it determines if we will use parametric or non-parametric methods for our statistical tests. Using the wrong tests may result in erroneous results and conclusions!\n\n\nFor the testing of normality assumption and CDA, we will transform the data to a format where each row will be equivalent to 1 resident using the below code chunk.\n\n\nShow code\njoviality <- final %>%\n  #To ungroup any variables if necessary\n  ungroup() %>%\n  #To select the columns as needed\n  select(ParticipantID, Cost_of_living, Total_Income, Total_Savings, HouseholdSize,\n         HaveKids, EducationLevel, InterestGroup, age, Age_Category, Joviality) %>% \n  group_by(ParticipantID, Joviality, HouseholdSize, HaveKids, EducationLevel, InterestGroup, age, Age_Category) %>% \n  #Calculate average financial information per participant across the 15 months\n  summarise(across(c(Total_Income, Cost_of_living, Total_Savings), mean)) %>%\n  rename(\"Avg_MonthlyIncome\" = \"Total_Income\",\n         \"Avg_MonthlyCosts\" = \"Cost_of_living\",\n         \"Avg_MonthlySavings\" = \"Total_Savings\")\n\n#Round values\njoviality$Avg_MonthlyIncome <- round(joviality$Avg_MonthlyIncome,digits=0)\njoviality$Avg_MonthlyCosts <- round(joviality$Avg_MonthlyCosts,digits=0)\njoviality$Avg_MonthlySavings <- round(joviality$Avg_MonthlySavings,digits=0)\n\n#Check output of data\nDT::datatable(joviality, class = \"compact\")\n\n\n\n\n\n\n\n\n\nTesting of Normality Assumption\nAs the plot below shows, p-value is less than 0.05 i.e., the distribution of joviality is not Normal and therefore non-parametric statistical tests must be used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n#Plot QQplot for Joviality\nqq <- ggplot(joviality,\n       aes(sample=Joviality)) +  \n  stat_qq() +\n  stat_qq_line()\n\n#Run the Shapiro Wilki test\nsw_t <- shapiro_test(ppt$Joviality) %>% gt()   \n\n#Create a temp table\ntmp <- tempfile(fileext = '.png') \n# Save sw_t into tmp folder\ngtsave(sw_t, tmp)  \ntable_png <- png::readPNG(tmp, native = TRUE)\n\nqq+table_png\n\n\n\n\n\n\nDoes Financial Health influence Happiness?\nThe Harvard Business Review published research that on average, wealthier people are happier. However, how you spend, save, and think about money shapes how much joy you get from it.\nIn this vein, let’s explore if the financial health - income, savings, and expenditures - influences the happiness of residents in the City using correlation. Logically, the more income you earn, more savings you have, and less expenditures you have, should result in higher happiness. It will be interesting to assess if the age of the resident matters as well. It is possible that the older residents would tend to have higher income (due to experience), more savings, and more expenditures.\nHowever, the correlation plots below shows otherwise:\n\nFor income, there seems to be a negative trend for all age groups i.e. higher income is negatively correlated with lower joviality scores.\nFor savings, the same trend persists - a negative trend for all age groups i.e. higher savings is negatively correlated with lower joviality scores.\nFor cost of living, there is an unexpected positive trend for all age groups i.e. higher expenses is positively correlated with higher joviality scores.\n\n\nIncomeSavingsCostsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Mapping correlation of Joviality & Average Monthly Income\np4 <- plot_ly(data = joviality, x = ~Joviality, y = ~Avg_MonthlyIncome, size = ~Avg_MonthlyIncome, \n               color = ~Age_Category) %>%\n    layout(title = '<b> Correlation: Joviality and Income <b>', xaxis = list(title = 'Joviality Index'), yaxis = list(title = 'Average Income'), legend = list(title=list(text='<b> Age Category </b>')))\n\np4\n\n#Mapping correlation of Joviality & Average Monthly Savings\np5 <- plot_ly(data = joviality, x = ~Joviality, y = ~Avg_MonthlySavings, size = ~Avg_MonthlySavings, \n               color = ~Age_Category) %>%\n    layout(title = '<b> Correlation: Joviality and Savings <b>', xaxis = list(title = 'Joviality Index'), yaxis = list(title = 'Average Savings'), legend = list(title=list(text='<b> Age Category </b>')))\n\np5\n\n#Mapping correlation of Joviality & Average Monthly Expenditures\np6 <- plot_ly(data = joviality, x = ~Joviality, y = ~Avg_MonthlyCosts, size = ~Avg_MonthlyCosts, \n               color = ~Age_Category) %>%\n    layout(title = '<b> Correlation: Joviality and Cost of Living <b>', xaxis = list(title = 'Joviality Index'), yaxis = list(title = 'Average Costs'), legend = list(title=list(text='<b> Age Category </b>')))\n\np6\n\n\n\n\nThe correlation test for the above trends are significant, indicating that the trends are statistically significant. If we go back to the Harvard Business Review’s findings, it is possible that residents are indeed spending their money in ways that make them happy, and thus cost of living is positively correlated with joviality scores, and this is statistically significant.\n\nIncomeSavingsCostsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Statistical Test of Joviality & Average Monthly Income Correlation\nggscatterstats(\n  data = joviality,\n  x = Joviality,\n  y = Avg_MonthlyIncome,\n  marginal = FALSE,\n  ) + \nggtitle(\"Joviality and Average Income\") +\nlabs(x = \"Joviality Index\", y = \"Average Income\") +\ntheme_classic()\n\n#Statistical Test of Joviality & Average Monthly Savings Correlation\nggscatterstats(\n  data = joviality,\n  x = Joviality,\n  y = Avg_MonthlySavings,\n  marginal = FALSE,\n  ) + \nggtitle(\"Joviality and Average Savings\") +\nlabs(x = \"Joviality Index\", y = \"Average Savings\") +\ntheme_classic()\n\n#Statistical Test of Joviality & Average Monthly Expenditures Correlation\nggscatterstats(\n  data = joviality,\n  x = Joviality,\n  y = Avg_MonthlyCosts,\n  marginal = FALSE,\n  ) + \nggtitle(\"Joviality and Average Cost of Living\") +\nlabs(x = \"Joviality Index\", y = \"Average Cost of Living\") +\ntheme_classic()\n\n\n\n\n\n\nDoes Education and Age influence Happiness?\nIn 2016, the Time Magazine reported that older people tend to be happier than young adults, as they are much better able to brush off life’s small stressors and accumulate a valuable thing called wisdom: being emotionally stable and compassionate, knowing yourself and being able to make smart social decisions. A year earlier, Time also published a report stating that there is no link between education level and happiness. It will be interesting to see if these two trends hold true for residents in the City.\n\nEducation and Happiness\nSince the variable joviality did not meet the normality assumption, the non-parametric Kruskal Wallis test was conducted to find if mean joviality scores differed between different levels of education. As shown below, the p-value of the Kruskal-Wallis rank sum test is 0.0036. We can conclude that mean joviality scores differed significantly across the four education levels. Specifically, High School or College education level differed significantly from Bachelors and Graduate. The mean joviality score of Bachelors and Graduate was higher than that of High School or College, indicating that the higher the level of education, the happier you are.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n#np denotes non-parametric test\nggbetweenstats(data = joviality, x = EducationLevel, y = Joviality,\n               xlab = \"Education level\", ylab = \"Joviality Index\",\n               type = \"np\", pairwise.comparisons = TRUE, pairwise.display = \"s\",\n               mean.ci = T, p.adjust.method = \"fdr\",  conf.level = 0.95,\n               title = \"Comparison of Mean Joviality index across Education Levels\") + \n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  theme_classic() \n\n\n\n\n\n\nAge and Happiness\nIn our revamped Joviality dataset, age exists as a categorical and continuous variable. It will be interesting to see if there is a difference in our analyses for both. As the plot shows, though age is negatively correlated with joviality scores and it is statistically significant, it is a very weak correlation of only -0.07. Age as a categorical variable did not have any significant influence on joviality scores, with p-value > 0.05. Age as a continuous variable had a negative influence on joviality scores.\n\nAge (Continuous)Age CategoryCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Age as a Continuous Variable\nggscatterstats(\n  data = joviality,\n  x = Joviality,\n  y = age,\n  marginal = FALSE,\n  ) + \nggtitle(\"Joviality and Age\") +\nlabs(x = \"Joviality Index\", y = \"Age\") \n\n#Age as a Categorical Variable\nggbetweenstats(data = joviality, x = Age_Category, y = Joviality,\n               xlab = \"Age Category\", ylab = \"Joviality Index\",\n               type = \"np\", pairwise.comparisons = TRUE, pairwise.display = \"s\",\n               mean.ci = T, p.adjust.method = \"fdr\",  conf.level = 0.95,\n               sort = \"ascending\",\n               title = \"Comparison of Mean Joviality index across Age Groups\") + \n  scale_y_continuous(limits = c(0, 2)) +\n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  theme_classic() \n\n\n\n\n\n\n\nDoes Marital Status and Having Kids Influence Happiness?\nGoing back to Time magazine, it reported that a study of the life satisfaction of 22 Western countries found that in many countries, parents were happier than non-parents, except for the US.\nTherefore in our final analysis, we will explore if marital status and having children influences happiness. Since all residents with a household size of 3 also satisfied the condition of true for the variable HaveKids, we will use household size as a proxy variable for marital status i.e., 1 = single, 2 = married, 3 = married with a child.\nThe plot shows that for singles, there seems to be 2 main humps at Joviality scores of 0.2 and 0.9 i.e. singles experience a varying range of happiness with some being happier than others. For majority of the married couples and those with children, joviality scores tend to be lower.\nThe Kruskal-Wallis rank sum test was non-significant with a p-value > 0.05, indicating that joviality was not influenced by marital status and having children.\n\nPlotStatistical TestCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Plot a ridgeline graph\nggplot(joviality, \n       aes(x = Joviality, \n           y = HouseholdSize,\n           fill = after_stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_x_continuous(\n    name = \"Joviality index\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_classic() +\n  scale_fill_viridis_c(name = \"Joviality\",\n                       option = \"G\")\n\n#Non-parametric Statistical Test\nggbetweenstats(data = joviality, x = HouseholdSize, y = Joviality,\n               xlab = \"Marital Status\", ylab = \"Joviality Index\",\n               type = \"np\", pairwise.comparisons = TRUE, pairwise.display = \"s\",\n               mean.ci = T, p.adjust.method = \"fdr\",  conf.level = 0.95,\n               title = \"Comparison of Mean Joviality index across Marital Status\") + \n  theme(axis.title.y=element_text(angle = 0,\n                                  vjust=0.9)) +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-wrangling",
    "title": "Hands on Ex 5",
    "section": "5.2 Data Wrangling",
    "text": "5.2 Data Wrangling\nWe will examine the structure of the data frame using glimpse() of dplyr.\n\n\nShow code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. Before we continue, it is important for us to change the data type of SentDate field to “Date”” data type.The code chunk below will be used to perform the changes.\n\n\n\n\nShow code\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation. In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\n\nShow code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nA new field called Weight has been added in the new output file GAStech_edges_aggregated.\n\n\n\n\n\nShow code\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-network-objects-using-tidygraph",
    "title": "Hands on Ex 5",
    "section": "5.3 Creating network objects using tidygraph",
    "text": "5.3 Creating network objects using tidygraph\nIn this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow. Before getting started, you are advised to read these two articles:\n\nIntroducing tidygraph\nA tidy hope\n\n\n5.3.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\n5.3.2 The dplyr verbs in tidygraph\nThe activate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\nIn the above image, the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n5.3.3 Using tbl_graph() to build tidygraph data model\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph().\n\n\nShow code\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\n5.3.4 Reviewing the output tidygraph’s graph object\n\n\nShow code\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 1372 edges. The command also prints the first six rows of the node data and the first three rows of edge data. It states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n5.3.5 Changing the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange(), for example as below. Visit the reference guide of activate() to find out more about the function.\n\n\nShow code\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 1,372 × 4\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# ℹ 1,366 more rows\n#\n# A tibble: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands on Ex 5",
    "section": "5.4 Plotting Static Network Graphs with ggraph package",
    "text": "5.4 Plotting Static Network Graphs with ggraph package\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs. As in all network graphs, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges, and\nlayouts.\n\n\n5.4.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\n\nShow code\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n5.4.2 Changing the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read its reference guide at least once.\n\n\nShow code\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\n5.4.3 Changing the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\n\nShow code\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n5.4.4 Working with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n \n\n\n5.4.5 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout. The layout argument is used to define the layout to be used.\n\n\nShow code\ng <- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n5.4.6 Modifying network nodes\nIn this section, you will colour each node by referring to their respective departments. The geom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chunks above colour and size are used.\n\n\nShow code\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n5.4.7 Modifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable. The geom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.\n\n\nShow code\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#creating-facet-graphs",
    "title": "Hands on Ex 5",
    "section": "5.5 Creating facet graphs",
    "text": "5.5 Creating facet graphs\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data. There are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\n5.5.1 Working with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nShow code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\nThe code chunk below uses theme() to change the position of the legend.\n\n\nShow code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n5.5.2 A framed facet graph\nThe code chunk below adds frame to each graph.\n\n\nShow code\nset_graph_style() \n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n5.5.3 Working with facet_nodes()\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\n\nShow code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#network-metrics-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#network-metrics-analysis",
    "title": "Hands on Ex 5",
    "section": "5.6 Network Metrics Analysis",
    "text": "5.6 Network Metrics Analysis\n\n5.6.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of these network measures.\n\n\nShow code\ng <- GAStech_graph %>%\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr is used to perform the computation.\nThe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\n5.6.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\n\nShow code\ng <- GAStech_graph %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n5.6.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph.\nIn the code chunk below group_edge_betweenness() is used.\n\n\nShow code\ng <- GAStech_graph %>%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands on Ex 5",
    "section": "5.7 Building Interactive Network Graph with visNetwork",
    "text": "5.7 Building Interactive Network Graph with visNetwork\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\n5.7.1 Data preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\n\nShow code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from!=to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\n\n\n\n5.7.2 Plotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\n\nShow code\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n5.7.3 Working with layout\nIn the code chunk below, Fruchterman and Reingold layout is used. Visit Igraph to find out more about visIgraphLayout’s argument.\n\n\nShow code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n\n\n5.7.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field. The code chunk below rename Department field to group.\n\n\nShow code\nGAStech_nodes <- GAStech_nodes %>%\n  rename(group = Department) \n\n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nShow code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n5.7.5 Working with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n\nThe argument arrows is used to define where to place the arrow.\nThe smooth argument is used to plot the edges using a smooth curve.\n\nVisit Option to find out more about visEdges’s argument.\n\n\nShow code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\n\n5.7.6 Interactivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\nVisit Option to find out more about visOption’s argument.\n\n\nShow code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#data-wrangling",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nLet’s first load the packages and datasets to be used.\n\n\nShow code\npacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, jsonlite, patchwork, DT, zoo, ggiraph,\n               plotly)\n\n\n\n\nShow code\nchallenge_graph <- fromJSON(\"data/mc2_challenge_graph.json\")\n\n\nThe data is in list format but we need to change it into a tabular format. We also will use the select() function to reorganise the structure of the dataset. This is first done for the nodes in the dataset. We will use the select function to choose the columns we need, as well as re-organise the order of columns.\n\n\nShow code\nMC2_nodes <- as_tibble(challenge_graph$nodes) %>%\n  select(id, shpcountry, rcvcountry)\nMC2_nodes\n\n\n# A tibble: 34,576 × 3\n   id                                shpcountry rcvcountry\n   <chr>                             <chr>      <chr>     \n 1 AquaDelight Inc and Son's         Polarinda  Oceanus   \n 2 BaringoAmerica Marine Ges.m.b.H.  <NA>       <NA>      \n 3 Yu gan  Sea spray GmbH Industrial Oceanus    Oceanus   \n 4 FlounderLeska Marine BV           <NA>       <NA>      \n 5 Olas del Mar Worldwide            Oceanus    Oceanus   \n 6 French Crab S.p.A. Worldwide      Kondanovia Utoporiana\n 7 KisumuSeafood Brothers Ltd        <NA>       <NA>      \n 8 Panope Limited Liability Company  Vesperanda Oceanus   \n 9 hǎi dǎn Corporation Wharf         Marebak    Oceanus   \n10 NamRiver Transit A/S              <NA>       <NA>      \n# ℹ 34,566 more rows\n\n\nNext, we will do the same for the edges in the dataset. Primary analysis of the data in Excel showed that there were a large portion of missing data under the columns of valueofgoods_omu, volumeteu, and valueofgoodsusd. As such, these columns will not be selected for the data.\n\n\nShow code\nMC2_edges <- as_tibble(challenge_graph$links) %>%\n  select(source, target, arrivaldate, hscode, weightkg)\n\n\nWe will now use the glimpse() function to take a look at each of the tibble dataframes. The nodes dataframe has no issues.\n\n\nShow code\nglimpse(MC2_nodes)\n\n\nRows: 34,576\nColumns: 3\n$ id         <chr> \"AquaDelight Inc and Son's\", \"BaringoAmerica Marine Ges.m.b…\n$ shpcountry <chr> \"Polarinda\", NA, \"Oceanus\", NA, \"Oceanus\", \"Kondanovia\", NA…\n$ rcvcountry <chr> \"Oceanus\", NA, \"Oceanus\", NA, \"Oceanus\", \"Utoporiana\", NA, …\n\n\nHowever, the edges dataframe reads its arrival date as a character function. Further, the task requires temporal analysis, but it only has the date.\n\n\nShow code\nglimpse(MC2_edges)\n\n\nRows: 5,464,378\nColumns: 5\n$ source      <chr> \"AquaDelight Inc and Son's\", \"AquaDelight Inc and Son's\", …\n$ target      <chr> \"BaringoAmerica Marine Ges.m.b.H.\", \"BaringoAmerica Marine…\n$ arrivaldate <chr> \"2034-02-12\", \"2034-03-13\", \"2028-02-07\", \"2028-02-23\", \"2…\n$ hscode      <chr> \"630630\", \"630630\", \"470710\", \"470710\", \"470710\", \"470710\"…\n$ weightkg    <int> 4780, 6125, 10855, 11250, 11165, 11290, 9000, 19490, 6865,…\n\n\nThus we will change the arrivaldate field to be in date format, and extract the year and month for further analysis as in the code chunk below. The preliminary analysis in Excel also showed many duplicate records, where there was the same shipment in terms of weight, which is not possible. Thus we will also extract the distinct records.\n\n\nShow code\nMC2_edges <- MC2_edges %>%\n  mutate(ArrDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(arrivaldate)) %>%\n  mutate(Month = month(arrivaldate)) %>%\n  distinct()\n\n#To check the dataset\nglimpse(MC2_edges)\n\n\nRows: 5,190,407\nColumns: 8\n$ source      <chr> \"AquaDelight Inc and Son's\", \"AquaDelight Inc and Son's\", …\n$ target      <chr> \"BaringoAmerica Marine Ges.m.b.H.\", \"BaringoAmerica Marine…\n$ arrivaldate <chr> \"2034-02-12\", \"2034-03-13\", \"2028-02-07\", \"2028-02-23\", \"2…\n$ hscode      <chr> \"630630\", \"630630\", \"470710\", \"470710\", \"470710\", \"470710\"…\n$ weightkg    <int> 4780, 6125, 10855, 11250, 11165, 11290, 9000, 19490, 6865,…\n$ ArrDate     <date> 2034-02-12, 2034-03-13, 2028-02-07, 2028-02-23, 2028-09-1…\n$ Year        <dbl> 2034, 2034, 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028…\n$ Month       <dbl> 2, 3, 2, 2, 9, 10, 4, 6, 9, 9, 2, 2, 4, 4, 3, 9, 3, 3, 4, …\n\n\n\nPrepare the Edges Data Table\nExamining the dataframe shows that it comprises individual records which is not very useful for visualisation, since we would like to conduct a network analysis. As such, we will perform aggregation of the data by source, target, hscode, and Year, so that the number of transactions will be transformed to become the weight of the edge between the nodes. Since we do not want linkages with low weights, we will filter to select only the edges which have weights of more than 20.\nFurther, examination of HScodes indicate that HScode equivalent to 306170 refers to fish and crustaceans. Thus we will filter the data just for this HScode, as the other records may be shipments of other materials.\n\n\nShow code\nmc2_edges_aggregated <- MC2_edges %>%\n  filter(hscode == \"306170\") %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  filter(weights > 20) %>%\n  ungroup()\nglimpse(mc2_edges_aggregated)\n\n\nRows: 1,588\nColumns: 5\n$ source  <chr> \"1 Ltd. Liability Co Cargo\", \"1 Ltd. Liability Co Cargo\", \"1 L…\n$ target  <chr> \"Himachal Pradesh  BV Holdings\", \"Himachal Pradesh  BV Holding…\n$ hscode  <chr> \"306170\", \"306170\", \"306170\", \"306170\", \"306170\", \"306170\", \"3…\n$ Year    <dbl> 2028, 2029, 2030, 2030, 2031, 2033, 2034, 2029, 2030, 2029, 20…\n$ weights <int> 67, 59, 26, 148, 63, 36, 24, 29, 41, 25, 29, 26, 28, 51, 70, 4…\n\n\n\n\nPrepare the Nodes Data Table\nInstead of using the nodes data table extracted from the original dataset, we will prepare a new nodes data table by using the source and target fields of mc2_edges_aggregated data table. This is necessary to ensure that the nodes in the nodes data tables include all the source and target values.\n\n\nShow code\nid1 <- mc2_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nid2 <- mc2_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nmc2_nodes_extracted <- rbind(id1, id2) %>%\n  distinct()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#building-an-overview-of-the-network-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#building-an-overview-of-the-network-graph",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Building an Overview of the Network Graph",
    "text": "Building an Overview of the Network Graph\nFirst, we will need to prepare the data model, and to do so, we rename the source and target columns in the Edges data. Using the subsequent code chunk, we will filter the nodes from the nodes data, which only exist in the edges data, and then plot our interactive network graph using the visNetwork() function.\nWhen we look at the graph, we notice that there is a ring of disconnected components within. These are probably smaller companies which do not have much network connections with other companies. However, we will retain them just in case they are useful later.\n\n\nShow code\nmc2_edges <- mc2_edges_aggregated %>%\n  rename(from = source) %>%\n  rename(to = target) %>%\n  filter(from!=to) %>%\n  ungroup()\n\n\n\nInsight 1 - Companies with Extensive Networks\nThough the graph looks too dense to provide useful information, we can actually select the ID and note how widespread the connections of each company are. If we hover over the various nodes, we can even see that there are a few companies which have extremely extensive networks:\n\nhai dan Corporation Wharf\nCaracola del Este Ltd. Liability Co\nAquaDelight N.V. Coral Reef\n\nThese companies may be connected well with other fishing companies for a few reasons:\n\nThey may be collaborating to share resources such as fishing equipment, vessels, and crew members,\nThey may have cooperative agreements to collectively fish together, or\nThey may be the mediators in that they collaborate to have better market access and distribution channels. This would allow them to negotiate better deals with wholesalers, processors and distributors, thus letting them reach a wider customer base.\n\n\n\n\n\n\n\nNote\n\n\n\nNetwork graphs may seem overwhelming at first, especially for a large graph like this. Take your time to go through the nodes and explore using the interactivity feature, and see what you can learn!\n\n\n\n\nShow code\nedges <- mc2_edges \nnodes <- mc2_nodes_extracted %>%\n  filter(id %in% c(\"id\", edges$from, edges$to))\n\n\nvisNetwork(nodes, edges, main = \"An Overview of the Network Graph\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = 'to',\n           smooth = list(enables = TRUE,\n                         type= 'curvedCW'),\n           shadow = FALSE,\n           dash = FALSE) %>%\n  visOptions(highlightNearest = list (enabled = TRUE, hover = TRUE),\n             nodesIdSelection = TRUE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualisation-of-growth-by-year",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualisation-of-growth-by-year",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Visualisation of Growth by Year",
    "text": "Visualisation of Growth by Year\nSince we are interested in temporal patterns, let’s plot the connections by year, so that we can see how the layout of the graph changes. Below is the code chunk to filter the data by each year and then create the graph using the tbl_graph() and ggraph functions.\n\n\nShow code\n#Plot for 2028\nedges_2028 <- edges %>%\n  filter(Year == \"2028\")\nnodes_2028 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2028$from, edges_2028$to))\n\ngraph1 <- tbl_graph(nodes = nodes_2028,\n                       edges = edges_2028,\n                       directed = TRUE)\n\ng1 <- ggraph(graph1, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE) +\n  ggtitle (\"2028\")\n\n#Plot for 2029\nedges_2029 <- edges %>%\n  filter(Year == \"2029\")\nnodes_2029 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2029$from, edges_2029$to))\n\ngraph2 <- tbl_graph(nodes = nodes_2029,\n                       edges = edges_2029,\n                       directed = TRUE)\n\ng2 <- ggraph(graph2, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2029\")\n\n#Plot for 2030\nedges_2030 <- edges %>%\n  filter(Year == \"2030\")\nnodes_2030 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2030$from, edges_2030$to))\n\ngraph3 <- tbl_graph(nodes = nodes_2030,\n                       edges = edges_2030,\n                       directed = TRUE)\n\ng3 <- ggraph(graph3, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2030\")\n\n#Plot for 2031\nedges_2031 <- edges %>%\n  filter(Year == \"2031\")\nnodes_2031 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2031$from, edges_2031$to))\n\ngraph4 <- tbl_graph(nodes = nodes_2031,\n                       edges = edges_2031,\n                       directed = TRUE)\n\ng4 <- ggraph(graph4, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2031\")\n\n#Plot for 2032\nedges_2032 <- edges %>%\n  filter(Year == \"2032\")\nnodes_2032 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2032$from, edges_2032$to))\n\ngraph5 <- tbl_graph(nodes = nodes_2032,\n                       edges = edges_2032,\n                       directed = TRUE)\n\ng5 <- ggraph(graph5, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2032\")\n\n#Plot for 2033\nedges_2033 <- edges %>%\n  filter(Year == \"2033\")\nnodes_2033 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2033$from, edges_2033$to))\n\ngraph6 <- tbl_graph(nodes = nodes_2033,\n                       edges = edges_2033,\n                       directed = TRUE)\n\ng6 <- ggraph(graph6, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2033\")\n\n#Plot for 2034\nedges_2034 <- edges %>%\n  filter(Year == \"2034\")\nnodes_2034 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2034$from, edges_2034$to))\n\ngraph7 <- tbl_graph(nodes = nodes_2034,\n                       edges = edges_2034,\n                       directed = TRUE)\n\ng7 <- ggraph(graph7, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2034\")\n\n\nLet’s plot the graphs after the lengthy process of filtering the data using the patchwork function so that we can see all the graphs in one figure.\n\nInsight 2\nAs we analyse how the graphs change from 2028 to 2034, we can note the following:\n\nThe disconnected components undergo quite a change over the years - though most are in connections of 2-3 nodes in 2028, they expand to other nodes over the next few years, but then return to being disconnected after 2031. Possibly, these companies did have more shipments to other companies as the years went by, but over time these went back to the usual frequency of shipments.\nWhen we look at the density of the nodes, visually they seem to increase over time i.e., the number of shipping companies increase over the years.\nLooking at the edges, there’s 2 interesting things that change over time:\n\nThe number of edges seem to increase over time i.e., more companies have shipments with each other as the years go by.\nThe weight of the edges also increase over time. For example, in 2028 there is only one thick weighted edge of 400, whereas as the years go by, the magnitude of the weight increases to 600, and there are more weighted edges as well i.e., the frequency of shipments have increased over time for certain companies.\n\n\n\n\nShow code\ng1 + g2 + g3 + g4 + g5 + g6 + g7\n\n\n\n\n\nShow code\n  plot_layout(ncol=3)\n\n\n$ncol\n[1] 3\n\n$nrow\nNULL\n\n$byrow\nNULL\n\n$widths\nNULL\n\n$heights\nNULL\n\n$guides\nNULL\n\n$tag_level\nNULL\n\n$design\nNULL\n\nattr(,\"class\")\n[1] \"plot_layout\""
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#datasets",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#datasets",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Datasets",
    "text": "Datasets\nThe dataset used comprises two main files: (i) A graph in json format comprising 34,552 nodes and 5,464,092 directed edges and (ii) A bundle of 12 files with various edges. For this task, we will only use Dataset (i). It has the following properties:\n\nNodes\n\nid: Name of the company that originated (or received) the shipment\nshpcountry: Country the company most often associated with when shipping\nrcvcountry: Country the company most often associated with when receiving\ndataset: All values are “MC2”, referring to Mini Challenge 2\n\nEdges\n\narrivaldate: Date the shipment arrived at port in YYYY-MM-DD format\nhscode: Harmonized System code for the shipment\nvalueofgoods_omu: Customs-declared value of the total shipment, in Oceanus Monetary Units (OMU)\nvolumeteu: The volume of the shipment in ‘Twenty-foot equivalent units’, roughly how many 20-foot standard containers would be required.\nweightkg: The weight of the shipment in kilograms (if known)\ndataset: All values are “MC2”, referring to Mini Challenge 2\ntype: All values are “shipment”"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-the-centrality-of-the-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-the-centrality-of-the-graph",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Calculating the Centrality of the Graph",
    "text": "Calculating the Centrality of the Graph\nCentrality measures are among the most widely used indices based on network data, as they reflect a node’s importance in a network. There are different types of centrality such as closeness, degree, betweenness, and eigenvector. For this task, we will focus on degree and betweenness centrality.\nA node’s degree is a count of how many edges it has, and thus the degree centrality for a node is simply its degree. In a directed graph, there is an in-degree (edges pointing TO the node), and an out-degree (edges pointing FROM the node).\nThe betweenness centrality on the other hand, is a bit more complex - it captures the extent to which a certain node allows information to flow from one part of the network to the other i.e., how important is a node in bridging different nodes together?\nWe will use the following code chunk to calculate the abovementioned two centrality measures.\n\n\nShow code\n#Create the network graph \ncentrality_graph<- tbl_graph(nodes=nodes,\n                          edges = edges,\n                          directed = TRUE)\n\n#Calculate the centrality measures\ncentrality_graph<- centrality_graph %>%\n  activate(\"nodes\") %>% \n  mutate(betweenness_centrality = centrality_betweenness(directed = TRUE)) %>% \n  mutate(in_deg_centrality = centrality_degree(weights = weights, \n                                               mode = \"in\")) %>% \n  mutate(out_deg_centrality = centrality_degree(weights = weights, \n                                               mode = \"out\"))\n\n\nDegree Centrality\nLet’s summarise the top 10 nodes which have the highest centrality for in-degree. These are the companies which have the most imports from other companies. Knowing this information can help us detect illegal fishing in a few ways:\n\nSince certain regions/countries may have a higher prevalence of IUU fishing due to weak regulations, examining the import patterns can identify companies that consistently source seafood from these high-risk regions.\nThis information can be shared with other governments, enforcement agencies, and industry stakeholders to check if these companies also have similarly significant number of imports.\nOfficials can track the seafood supply chain for these companies so as to identify any potential gaps or discrepancies in the supply chain.\n\n\n\nShow code\nindeg_graph<- centrality_graph %>% \n  activate(\"nodes\") %>% \n  as_tibble() %>% \n  arrange(desc(in_deg_centrality)) %>% \n  select(id,in_deg_centrality) %>% \n  head(n=10)\n\n\nDT::datatable(indeg_graph, class = \"compact\", colnames = c(\"Name of Company\",\"In-Degree Centrality\"),\n              caption = 'Table 1: Top 10 Companies by In-Degree')\n\n\n\n\n\n\n\nBetweenness Centrality\nLet’s summarise the top 10 nodes which have the highest centrality for betweenness centrality.\n\nInsight XXXX\nxxx\n\n\nShow code\nbtwness_graph<- centrality_graph %>% \n  activate(\"nodes\") %>% \n  as_tibble() %>% \n  arrange(desc(betweenness_centrality)) %>% \n  select(id,betweenness_centrality) %>% \n  head(n=10)\n\n\nDT::datatable(btwness_graph, class = \"compact\", colnames = c(\"Name of Company\",\"Betweenness Centrality\"),\n              caption = 'Table 3: Top 10 Companies by Betweenness Centrality')\n\n\n\n\n\n\n\n\n\nInsight 4 - Visualising Highest Number of Imports - Mar del Este CJSC\n\nNetwork Graph\nLet’s map the graph of the company with highest imports to see how its networks look like, and their shipping patterns.\nMar del Este CJSC receives imports from a total of 44 distinct companies. Hovering over each of the edge will highlight the strength of each link, which is the frequency of the shipments to Mar del.\n\n\nShow code\n#Filter the dataset \nMardel_ego<- mc2_edges_aggregated %>%\n  filter(to %in% 'Mar del Este CJSC') \n\n#Create tooltip for edges info\nMardel_ego<- Mardel_ego %>%\n  mutate(title = paste('Strength of Link = ',weights))\n\n#Filter the dataset for nodes based on edges\nME_nodes <- nodes %>%\n  filter(id %in% c(\"id\", Mardel_ego$from, Mardel_ego$to))\n\nvisNetwork(ME_nodes, Mardel_ego, main = \"Network for Mar del\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(color=list(hover = \"black\"),\n  arrows = 'to',\n           smooth = list(enables = TRUE,\n                         type= 'curvedCW'),\n           shadow = FALSE,\n           dash = FALSE) %>%\n  visOptions(highlightNearest = list (enabled = TRUE, hover = TRUE),\n             nodesIdSelection = TRUE)\n\n\n\n\n\n\n\n\nShipping Patterns\nLet’s now look at the shipping pattern for Mar del.\nFirst, let’s filter the data to only elicit the company with the highest number of imports, Mar del Este CJSC. We will also arrange the dataset in descending order by weights to see the company which has the highest imports to Mar del. Then we will change the Year column to be in a date format as it is currently in numeric form.\nWe will then plot a line graph to see the time series trends of shipment for this company. The company has received imports from many companies, but we are only interested in looking at the companies with perhaps the 5 highest imports to Mar del. Thus we will plot the graphs for only these 5 companies. We filter the data by referring to the tibble dataset above.\n\n\nShow code\n#Filter the dataset & arrange in descending order of weights\nMardel<- mc2_edges_aggregated %>%\n  filter(to %in% 'Mar del Este CJSC') %>%\n  arrange(desc(weights))\n\n#Change the date format\nMardel2<- Mardel %>%\n  mutate (Year = as.yearmon(Year))\nMardel2 <- transform(Mardel2, Year = as.Date(Year, frac = 0))\n\n\nLooking at the plot, we can see that there is quite a large fluctuation in the frequency of shipments over the years for all 5 companies’ shipments to Mar del. While the frequency is increasing for Wave Watchers, the others are all decreasing. Specifically, Tristen Jetty, Ola de la Costa and Blue Horizon reach a peak in 2033 and then decrease sharply in 2034. It is possible that Mar del has stopped accepting shipments from them and now considers Wave Watchers as its main supplier/partner.\nHowever, we cannot definitively classify this as a red or green flag for IUU, as Mar del may have had its reasons for shifting to Wave Watchers, such as reliability, quality, or cost. To make a more accurate assessment, additional information is necessary - we may want to evaluate the reputation and track record of the companies involved, and conduct due diligence on their fishing practices, and adherence to regulations.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n#Wave Watchers Ltd.\nm1<- ggplot(Mardel2 %>% filter(from=='Wave Watchers Ltd. Liability Co'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Wave Watchers Ltd.', \n       x = 'Year', y =\"\") \n\n#Tristen Jetty Company Solutions\nm2<- ggplot(Mardel2 %>% filter(from=='Tristen Jetty Company Solutions'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Tristen Jetty', \n       x = 'Year', y =\"\") \n\n#Chuan gou N.V. Delivery\nm3<- ggplot(Mardel2 %>% filter(from=='Chuan gou  N.V. Delivery'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Chuan gou', \n       x = 'Year',\n       y='Number of Imports to Mar Del') \n\n#Ola de la Costa Ges.m.b.H.\nm4<- ggplot(Mardel2 %>% filter(from=='Ola de la Costa Ges.m.b.H.'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Ola de la Costa', \n       x = 'Year', y =\"\") \n\n#Blue Horizon Family &\nm5<- ggplot(Mardel2 %>% filter(from=='Blue Horizon Family &'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Blue Horizon Family &', \n       x = 'Year', y =\"\") \n\ngirafe(code = print(m1 / m2 / m3 / m4 / m5),\n       width_svg = 6,\n       height_svg =10)\n\n\n\n\n\n\n\nInsight 5 - Visualising Highest Number of Exports - Blue Horizon Family\n\nNetwork Graph\nLet’s summarise the top 10 nodes which have the highest centrality for out-degree. These are the companies which carry out the most exports. Knowing this information can help us detect illegal fishing in a few ways:\n\nMonitoring and oversight can be focused on these high-volume exporters, as they may have a higher risk of being involved in illegal fishing or trading of illicit seafood products.\nWe can delve deeper into the export patterns to identify the regions and countries these companies are exporting to, and identify if there are any areas where illegal fishing practices may be more prevalent.\nKnowing which companies export the most provide officials an opportunity to be able to scrutinize their records, so that they can check if the companies are compliant with regulations, such as catch documentation schemes or sustainability certifications. This will prevent the trade of illegally caught or unreported seafood.\n\n\n\nShow code\noutdeg_graph<- centrality_graph %>% \n  activate(\"nodes\") %>% \n  as_tibble() %>% \n  arrange(desc(out_deg_centrality)) %>% \n  select(id,out_deg_centrality) %>% \n  head(n=10)\n\n\nDT::datatable(outdeg_graph, class = \"compact\", colnames = c(\"Name of Company\",\"Out-Degree Centrality\"),\n              caption = 'Table 2: Top 10 Companies by Out-Degree')\n\n\n\n\n\n\n\nBlue Horizon Family exports to 23 companies in total. Hovering over each of the edge will highlight the strength of each link, which is the frequency of the shipments from Blue Horizon\n\n\nShow code\n#Filter edge data\nBlue_ego<- mc2_edges_aggregated %>%\n  filter(from %in% 'Blue Horizon Family &') \n\n#Create tooltip for edges info\nBlue_ego<- Blue_ego %>%\n  mutate(title = paste('Strength of Link = ',weights))\n\n#Filter the dataset for nodes based on edges\nBlue_nodes <- nodes %>%\n  filter(id %in% c(\"id\", Blue_ego$from, Blue_ego$to))\n\n\nvisNetwork(Blue_nodes, Blue_ego, main = \"Network for Blue Horizon Family\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(color=list(hover = \"black\"), arrows = 'to',\n           smooth = list(enables = TRUE,\n                         type= 'curvedCW'),\n           shadow = FALSE,\n           dash = FALSE) %>%\n  visOptions(highlightNearest = list (enabled = TRUE, hover = TRUE),\n             nodesIdSelection = TRUE)\n\n\n\n\n\n\n\n\nShipping Patterns\nLet’s now look at the shipping pattern using the code chunk we did as above to only elicit the company with the highest number of exports, Blue Horizon Family.\n\n\nShow code\n#Filter the dataset & arrange in descending order of weights\nBlue<- mc2_edges_aggregated %>%\n  filter(from %in% 'Blue Horizon Family &') %>%\n  arrange(desc(weights))\n\n#Change the date format\nBlue2<- Blue %>%\n  mutate (Year = as.yearmon(Year))\nBlue2 <- transform(Blue2, Year = as.Date(Year, frac = 0))\n\n\nLooking at the plot, we can see that there is quite a large fluctuation in the frequency of shipments over the years for all 5 companies’ shipments from Blue Horizon.\nWhile the frequency is increasing for Madagascar Coast and Pao gan, the other three all peak in 2033 and then have a sharp decrease for 2024. Similar to Insight 6, it is possible that Blue Horizon now considers Madagascar Coast and Pao gan as its main supplier/partners.\nAs above, we cannot definitively classify this as a red or green flag for IUU, and additional information is necessary to make a more accurate assessment.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n#Madagascar Coast AG Freight\nb1<- ggplot(Blue2 %>% filter(to=='Madagascar Coast  AG Freight '), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Madagascar Coast AG Freight', \n       x = 'Year', y =\"\") \n\n#Mar del Este CJSC\nb2<- ggplot(Blue2 %>% filter(to=='Mar del Este CJSC'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Mar del Este CJSC', \n       x = 'Year', y =\"\") \n\n#Orange River Incorporated Shipping\nb3<- ggplot(Blue2 %>% filter(to=='Orange River   Incorporated Shipping'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Orange River Incorporated Shipping', \n       x = 'Year',\n       y='Number of Imports from Blue Horizon Family') \n\n#Costa de la Felicidad Shipping\nb4<- ggplot(Blue2 %>% filter(to=='Costa de la Felicidad Shipping'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Costa de la Felicidad Shipping', \n       x = 'Year', y =\"\") \n\n#Pao gan SE Seal\nb5<- ggplot(Blue2 %>% filter(to=='Pao gan SE Seal'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Pao gan SE Seal', \n       x = 'Year', y =\"\") \n\ngirafe(code = print(b1 / b2 / b3 / b4 / b5),\n       width_svg = 6,\n       height_svg =10)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualising-the-centrality-of-the-graph",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualising-the-centrality-of-the-graph",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Visualising the Centrality of the Graph",
    "text": "Visualising the Centrality of the Graph\nNow that we know the shipping companies with the highest number of imports and exports, let’s map their graphs to see how their networks look like, and their shipping patterns.\n\nHighest Number of Imports - Mar del Este CJSC\nMar del Este CJSC receives imports from a total of 44 distinct companies. Hovering over each of the edge will highlight the strength of each link, which is the frequency of the shipments to Mar del.\n\n\nShow code\n#Filter the dataset \nMardel_ego<- mc2_edges_aggregated %>%\n  filter(to %in% 'Mar del Este CJSC') \n\n#Create tooltip for edges info\nMardel_ego<- Mardel_ego %>%\n  mutate(title = paste('Strength of Link = ',weights))\n\n#Filter the dataset for nodes based on edges\nME_nodes <- nodes %>%\n  filter(id %in% c(\"id\", Mardel_ego$from, Mardel_ego$to))\n\nvisNetwork(ME_nodes, Mardel_ego, main = \"Network for Mar del\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(color=list(hover = \"black\"),\n  arrows = 'to',\n           smooth = list(enables = TRUE,\n                         type= 'curvedCW'),\n           shadow = FALSE,\n           dash = FALSE) %>%\n  visOptions(highlightNearest = list (enabled = TRUE, hover = TRUE),\n             nodesIdSelection = TRUE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-shipping-patterns-for-highest-imports---mar-del-este-cjsc",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-shipping-patterns-for-highest-imports---mar-del-este-cjsc",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Plotting the Shipping Patterns for Highest Imports - Mar del Este CJSC",
    "text": "Plotting the Shipping Patterns for Highest Imports - Mar del Este CJSC\nOur next task is to look at the shipping pattern for Mar del.\nFirst, let’s filter the data to only elicit the company with the highest number of imports, Mar del Este CJSC. We will also arrange the dataset in descending order by weights to see the company which has the highest imports to Mar del. Then we will change the Year column to be in a date format as it is currently in numeric form.\n\n\nShow code\n#Filter the dataset & arrange in descending order of weights\nMardel<- mc2_edges_aggregated %>%\n  filter(to %in% 'Mar del Este CJSC') %>%\n  arrange(desc(weights))\n\n#Change the date format\nMardel2<- Mardel %>%\n  mutate (Year = as.yearmon(Year))\nMardel2 <- transform(Mardel2, Year = as.Date(Year, frac = 0))\n\n\nWe will then plot a line graph to see the time series trends of shipment for this company. The company has received imports from many companies, but we are only interested in looking at the companies with perhaps the 5 highest imports to Mar del. Thus we will plot the graphs for only these 5 companies. We filter the data by referring to the tibble dataset above.\n\nInsight 7 - Mar del’s Main Partners\nLooking at the plot, we can see that there is quite a large fluctuation in the frequency of shipments over the years for all 5 companies’ shipments to Mar del. While the frequency is increasing for Wave Watchers, the others are all decreasing. Specifically, Tristen Jetty, Ola de la Costa and Blue Horizon reach a peak in 2033 and then decrease sharply in 2034. It is possible that Mar del has stopped accepting shipments from them and now considers Wave Watchers as its main supplier/partner.\nHowever, we cannot definitively classify this as a red or green flag for IUU, as Mar del may have had its reasons for shifting to Wave Watchers, such as reliability, quality, or cost. To make a more accurate assessment, additional information is necessary - we may want to evaluate the reputation and track record of the companies involved, and conduct due diligence on their fishing practices, and adherence to regulations.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n#Wave Watchers Ltd.\nm1<- ggplot(Mardel2 %>% filter(from=='Wave Watchers Ltd. Liability Co'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Wave Watchers Ltd.', \n       x = 'Year', y =\"\") \n\n#Tristen Jetty Company Solutions\nm2<- ggplot(Mardel2 %>% filter(from=='Tristen Jetty Company Solutions'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Tristen Jetty', \n       x = 'Year', y =\"\") \n\n#Chuan gou N.V. Delivery\nm3<- ggplot(Mardel2 %>% filter(from=='Chuan gou  N.V. Delivery'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Chuan gou', \n       x = 'Year',\n       y='Number of Imports to Mar Del') \n\n#Ola de la Costa Ges.m.b.H.\nm4<- ggplot(Mardel2 %>% filter(from=='Ola de la Costa Ges.m.b.H.'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Ola de la Costa', \n       x = 'Year', y =\"\") \n\n#Blue Horizon Family &\nm5<- ggplot(Mardel2 %>% filter(from=='Blue Horizon Family &'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Blue Horizon Family &', \n       x = 'Year', y =\"\") \n\ngirafe(code = print(m1 / m2 / m3 / m4 / m5),\n       width_svg = 6,\n       height_svg =10)\n\n\n\n\n\n\nHighest Number of Exports - Blue Horizon Family\nBlue Horizon Family exports to 23 companies in total. Hovering over each of the edge will highlight the strength of each link, which is the frequency of the shipments from Blue Horizon\n\n\nShow code\n#Filter edge data\nBlue_ego<- mc2_edges_aggregated %>%\n  filter(from %in% 'Blue Horizon Family &') \n\n#Create tooltip for edges info\nBlue_ego<- Blue_ego %>%\n  mutate(title = paste('Strength of Link = ',weights))\n\n#Filter the dataset for nodes based on edges\nBlue_nodes <- nodes %>%\n  filter(id %in% c(\"id\", Blue_ego$from, Blue_ego$to))\n\n\nvisNetwork(Blue_nodes, Blue_ego, main = \"Network for Blue Horizon Family\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(color=list(hover = \"black\"), arrows = 'to',\n           smooth = list(enables = TRUE,\n                         type= 'curvedCW'),\n           shadow = FALSE,\n           dash = FALSE) %>%\n  visOptions(highlightNearest = list (enabled = TRUE, hover = TRUE),\n             nodesIdSelection = TRUE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-shipping-patterns-for-highest-exports---xxx",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-shipping-patterns-for-highest-exports---xxx",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Plotting the Shipping Patterns for Highest Exports - XXX ",
    "text": "Plotting the Shipping Patterns for Highest Exports - XXX \nNext, let’s filter the data to only elicit the company with the highest number of exports, XXX."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-shipping-patterns-for-highest-exports---blue-horizon-family",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#plotting-the-shipping-patterns-for-highest-exports---blue-horizon-family",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Plotting the Shipping Patterns for Highest Exports - Blue Horizon Family",
    "text": "Plotting the Shipping Patterns for Highest Exports - Blue Horizon Family\nNext, let’s plot the shipping patterns using the code chunk we did as above to only elicit the company with the highest number of exports, Blue Horizon Family.\n\n\nShow code\n#Filter the dataset & arrange in descending order of weights\nBlue<- mc2_edges_aggregated %>%\n  filter(from %in% 'Blue Horizon Family &') %>%\n  arrange(desc(weights))\n\n#Change the date format\nBlue2<- Blue %>%\n  mutate (Year = as.yearmon(Year))\nBlue2 <- transform(Blue2, Year = as.Date(Year, frac = 0))\n\n\n\nInsight 8 - Blue Horizon’s Main Partners\nLooking at the plot, we can see that there is quite a large fluctuation in the frequency of shipments over the years for all 5 companies’ shipments from Blue Horizon.\nWhile the frequency is increasing for Madagascar Coast and Pao gan, the other three all peak in 2033 and then have a sharp decrease for 2024. Similar to Insight 6, it is possible that Blue Horizon now considers Madagascar Coast and Pao gan as its main supplier/partners.\nAs above, we cannot definitively classify this as a red or green flag for IUU, and additional information is necessary to make a more accurate assessment.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n#Madagascar Coast AG Freight\nb1<- ggplot(Blue2 %>% filter(to=='Madagascar Coast  AG Freight '), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Madagascar Coast AG Freight', \n       x = 'Year', y =\"\") \n\n#Mar del Este CJSC\nb2<- ggplot(Blue2 %>% filter(to=='Mar del Este CJSC'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Mar del Este CJSC', \n       x = 'Year', y =\"\") \n\n#Orange River Incorporated Shipping\nb3<- ggplot(Blue2 %>% filter(to=='Orange River   Incorporated Shipping'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Orange River Incorporated Shipping', \n       x = 'Year',\n       y='Number of Imports from Blue Horizon Family') \n\n#Costa de la Felicidad Shipping\nb4<- ggplot(Blue2 %>% filter(to=='Costa de la Felicidad Shipping'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Costa de la Felicidad Shipping', \n       x = 'Year', y =\"\") \n\n#Pao gan SE Seal\nb5<- ggplot(Blue2 %>% filter(to=='Pao gan SE Seal'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Pao gan SE Seal', \n       x = 'Year', y =\"\") \n\ngirafe(code = print(b1 / b2 / b3 / b4 / b5),\n       width_svg = 6,\n       height_svg =10)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#key-takeaways",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#key-takeaways",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Key Takeaways",
    "text": "Key Takeaways\nThe analyses have provided the following key takeaways:\n\nLooking at the overall data, quite alot of companies had low betweenness, and in and out degree centrality. It’s possible that the shipment networks in this industry is quite sparse and potentially disconnected.\nOver time, there has been a growth in the shipping networks in terms of connections built, and the frequency of shipments. It is worth monitoring the rate of growth so as to earmark sudden increases for potential IUU.\nThe companies with the highest imports and exports are possible the biggest stakeholders of this industry, as they are receiving (i.e., buyer) or shipping (i.e., supplier) the most. We also plotted their 5 top partners. Though we could not definitively classify them as red/green flags for IUU, it invites great opportunities for more analysis - we may wish to zoom into the trading patterns, changes in weight of the shipments over time, as well as possibly look at communities within the companies and their behaviours. This can help to improve detection of IUU."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualisation-of-growth-of-the-network-over-time",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualisation-of-growth-of-the-network-over-time",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Visualisation of Growth of the Network Over Time",
    "text": "Visualisation of Growth of the Network Over Time\nSince we are interested in temporal patterns, let’s plot the connections by year, so that we can see how the layout of the graph changes. Below is the code chunk to filter the data by each year and then create the graph using the tbl_graph() and ggraph functions.\n\n\nShow code\n#Plot for 2028\nedges_2028 <- edges %>%\n  filter(Year == \"2028\")\nnodes_2028 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2028$from, edges_2028$to))\n\ngraph1 <- tbl_graph(nodes = nodes_2028,\n                       edges = edges_2028,\n                       directed = TRUE)\n\ng1 <- ggraph(graph1, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE) +\n  ggtitle (\"2028\")\n\n#Plot for 2029\nedges_2029 <- edges %>%\n  filter(Year == \"2029\")\nnodes_2029 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2029$from, edges_2029$to))\n\ngraph2 <- tbl_graph(nodes = nodes_2029,\n                       edges = edges_2029,\n                       directed = TRUE)\n\ng2 <- ggraph(graph2, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2029\")\n\n#Plot for 2030\nedges_2030 <- edges %>%\n  filter(Year == \"2030\")\nnodes_2030 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2030$from, edges_2030$to))\n\ngraph3 <- tbl_graph(nodes = nodes_2030,\n                       edges = edges_2030,\n                       directed = TRUE)\n\ng3 <- ggraph(graph3, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2030\")\n\n#Plot for 2031\nedges_2031 <- edges %>%\n  filter(Year == \"2031\")\nnodes_2031 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2031$from, edges_2031$to))\n\ngraph4 <- tbl_graph(nodes = nodes_2031,\n                       edges = edges_2031,\n                       directed = TRUE)\n\ng4 <- ggraph(graph4, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2031\")\n\n#Plot for 2032\nedges_2032 <- edges %>%\n  filter(Year == \"2032\")\nnodes_2032 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2032$from, edges_2032$to))\n\ngraph5 <- tbl_graph(nodes = nodes_2032,\n                       edges = edges_2032,\n                       directed = TRUE)\n\ng5 <- ggraph(graph5, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2032\")\n\n#Plot for 2033\nedges_2033 <- edges %>%\n  filter(Year == \"2033\")\nnodes_2033 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2033$from, edges_2033$to))\n\ngraph6 <- tbl_graph(nodes = nodes_2033,\n                       edges = edges_2033,\n                       directed = TRUE)\n\ng6 <- ggraph(graph6, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2033\")\n\n#Plot for 2034\nedges_2034 <- edges %>%\n  filter(Year == \"2034\")\nnodes_2034 <- nodes %>%\n  filter(id %in% c(\"id\", edges_2034$from, edges_2034$to))\n\ngraph7 <- tbl_graph(nodes = nodes_2034,\n                       edges = edges_2034,\n                       directed = TRUE)\n\ng7 <- ggraph(graph7, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=weights), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(size = 2, show.legend = FALSE)+\n  ggtitle (\"2034\")\n\n\nLet’s plot the graphs below after the lengthy process of filtering the data using the patchwork function so that we can see all the graphs in one figure.\n\nInsight 2 - Change in Networks Over Time\nAs we analyse how the graphs change from 2028 to 2034, we can note the following:\n\nThe disconnected components undergo quite a change over the years - though most are in connections of 2-3 nodes in 2028, they expand to other nodes over the next few years, but then return to being disconnected after 2031. Possibly, these companies did have more shipments to other companies as the years went by, but over time these went back to the usual frequency of shipments.\nWhen we look at the density of the nodes, visually they seem to increase over time i.e., the number of shipping companies increase over the years.\nLooking at the edges, there’s 2 interesting things that change over time:\n\nThe number of edges seem to increase over time i.e., more companies have shipments with each other as the years go by.\nThe weight of the edges also increase over time. For example, in 2028 there is only one thick weighted edge of 400, whereas as the years go by, the magnitude of the weight increases to 600, and there are more weighted edges as well i.e., the frequency of shipments have increased over time for certain companies.\n\n\n\n\nShow code\ng1 + g2 + g3 + g4 + g5 + g6 + g7 +\n  plot_layout(ncol=3)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#shipping-patterns-over-time",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#shipping-patterns-over-time",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Shipping Patterns Over Time",
    "text": "Shipping Patterns Over Time\nBefore we delve into the details of specific shipping patterns (e.g., imports/exports), let’s look at the overall shipping patterns over time. For this, we will summarise the data by the year.\n\n\nShow code\n#Group the data\nsummary_shipments <- edges %>%\n  group_by(Year) %>%\n  summarize(total_freq = sum(weights)) %>%\n  ungroup() \n\n#Transform the Year to date format\nsummary_shipments<- summary_shipments %>%\n  mutate (Year = as.yearmon(Year))\nsummary_shipments <- transform(summary_shipments, Year = as.Date(Year, frac = 0))\n\n\n# Check the updated summary_yearmonth data\nprint(summary_shipments)\n\n\n        Year total_freq\n1 2028-01-01       8228\n2 2029-01-01      11066\n3 2030-01-01      11341\n4 2031-01-01      12382\n5 2032-01-01      17204\n6 2033-01-01      17691\n7 2034-01-01      18098\n\n\n\nInsight 3 - Increase in Shipments Frequency Over Time\nFrom the graph, we can see that there is an overall increasing trend - shipments have been increasing in frequency from 8228 in 2028, to 18,098 in 2034. The steepest increase was from 2031 to 2032 - this sudden sharp increase could indicate possible illegal fishing occurring in 2032. However, since this is aggregated data, we are not able to glean further detailed insights. The subsequent section will try explore the topmost exports and imports to see if there are any trends.\n\n\n\n\n\n\nNote\n\n\n\nThis is an interactive line graph. Hover over a point to see the X and Y coordinates!\n\n\n\n\nShow code\ns1 <- ggplot(summary_shipments, aes(x = Year)) +\n  geom_line(aes(y = total_freq, color = \"Total\"), size = 0.5) +\n  labs(x = \"Year\",\n       y = \"Number of Shipments\") +\n  scale_color_manual(values = c(\"Total\" = \"salmon\")) +\n  theme_classic() +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  ggtitle(\"Total Number of Shipments (2028-2034)\")\n\n#Convert to interactive line graph and hide legend\ns1 <- ggplotly(s1, tooltip = c(\"x\", \"y\"))\ns1 <- s1 %>% \n  layout(showlegend = FALSE)\ns1"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-the-centrality-of-the-graph---degree-centrality",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-the-centrality-of-the-graph---degree-centrality",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Calculating the Centrality of the Graph - Degree Centrality",
    "text": "Calculating the Centrality of the Graph - Degree Centrality\nCentrality measures are among the most widely used indices based on network data, as they reflect a node’s importance in a network. There are different types of centrality such as closeness, degree, betweenness, and eigenvector. For this task, we will focus on degree and betweenness centrality.\nA node’s degree is a count of how many edges it has, and thus the degree centrality for a node is simply its degree. In a directed graph, there is an in-degree (edges pointing TO the node), and an out-degree (edges pointing FROM the node).\nThe betweenness centrality on the other hand, is a bit more complex - it captures the extent to which a certain node allows information to flow from one part of the network to the other i.e., how important is a node in bridging different nodes together?\nWe will use the following code chunk to calculate the abovementioned two centrality measures. First, the degree centrality.\n\n\nShow code\n#Create the network graph \ncentrality_graph<- tbl_graph(nodes=nodes,\n                          edges = edges,\n                          directed = TRUE)\n\n#Calculate the centrality measures\ncentrality_graph<- centrality_graph %>%\n  activate(\"nodes\") %>% \n  mutate(in_deg_centrality = centrality_degree(weights = weights, \n                                               mode = \"in\")) %>% \n  mutate(out_deg_centrality = centrality_degree(weights = weights, \n                                               mode = \"out\"))\n\n\nLet’s summarise the top 10 nodes which have the highest centrality for in-degree. These are the companies which have the most imports from other companies. Knowing this information can help us detect illegal fishing in a few ways:\n\nSince certain regions/countries may have a higher prevalence of IUU fishing due to weak regulations, examining the import patterns can identify companies that consistently source seafood from these high-risk regions.\nThis information can be shared with other governments, enforcement agencies, and industry stakeholders to check if these companies also have similarly significant number of imports.\nOfficials can track the seafood supply chain for these companies so as to identify any potential gaps or discrepancies in the supply chain.\n\n\n\nShow code\nindeg_graph<- centrality_graph %>% \n  activate(\"nodes\") %>% \n  as_tibble() %>% \n  arrange(desc(in_deg_centrality)) %>% \n  select(id,in_deg_centrality) %>% \n  head(n=10)\n\n\nDT::datatable(indeg_graph, class = \"compact\", colnames = c(\"Name of Company\",\"In-Degree Centrality\"),\n              caption = 'Table 1: Top 10 Companies by In-Degree')\n\n\n\n\n\n\n\n\nInsight 4 - Visualising Highest Number of Imports - Mar del Este CJSC\n\nNetwork Graph\nLet’s map the graph of the company with highest imports to see how its networks look like, and their shipping patterns. We need to aggregate the edges such that the frequency of shipments are collapsed over the years, as per the following code chunk.\n\n\nShow code\n#Filter the dataset \nMardel_ego<- mc2_edges %>%\n  filter(to %in% 'Mar del Este CJSC') \n\n#Group by from and to, to collapse across the years\nMardel_ego_agg <- Mardel_ego %>%\n  group_by(from, to) %>%\n  summarise(sumweights = sum(weights), .groups = 'drop') %>%\n  filter(from != to) %>%\n  arrange(desc(sumweights)) %>%\n  ungroup() \n\n#Check the data!\nMardel_ego_agg\n\n\n# A tibble: 43 × 3\n   from                            to                sumweights\n   <chr>                           <chr>                  <int>\n 1 Wave Watchers Ltd. Liability Co Mar del Este CJSC       3207\n 2 Tristen Jetty Company Solutions Mar del Este CJSC       1682\n 3 Chuan gou  N.V. Delivery        Mar del Este CJSC       1145\n 4 Blue Horizon Family &           Mar del Este CJSC        754\n 5 Mar de la Vida S.p.A.           Mar del Este CJSC        360\n 6 Tripura  Market S.A. de C.V.    Mar del Este CJSC        357\n 7 Ola de la Costa Ges.m.b.H.      Mar del Este CJSC        343\n 8 Playa de Arena OJSC Express     Mar del Este CJSC        268\n 9 shí rén yú Marine conservation  Mar del Este CJSC        267\n10 Balkan Cat ОАО Transport        Mar del Este CJSC        222\n# ℹ 33 more rows\n\n\nMar del Este CJSC receives imports from a total of 44 distinct companies. Hovering over each of the edge will highlight the strength of each link, which is the frequency of the shipments from each company to Mar del. Select the following top 3 companies to see their total frequency of shipping - Wave Watchers, Tristen Jetty and Chuan gou!\n\n\nShow code\n#Create tooltip for edges info\nMardel_ego_agg<- Mardel_ego_agg %>%\n  mutate(title = paste('Strength of Link = ',sumweights))\n\n#Filter the dataset for nodes based on edges\nME_nodes <- nodes %>%\n  filter(id %in% c(\"id\", Mardel_ego_agg$from, Mardel_ego_agg$to))\n\nvisNetwork(ME_nodes, Mardel_ego_agg, main = \"Network for Mar del\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(color=list(hover = \"black\"),\n  arrows = 'to',\n           smooth = list(enables = TRUE,\n                         type= 'curvedCW'),\n           shadow = FALSE,\n           dash = FALSE) %>%\n  visOptions(highlightNearest = list (enabled = TRUE, hover = TRUE),\n             nodesIdSelection = TRUE)\n\n\n\n\n\n\n\n\nShipping Patterns\nLet’s now look at the shipping pattern for Mar del.\nFirst, let’s filter the data to only elicit the company with the highest number of imports, Mar del Este CJSC. We will also arrange the dataset in descending order by weights to see the company which has the highest imports to Mar del. Then we will change the Year column to be in a date format as it is currently in numeric form.\nWe will then plot a line graph to see the time series trends of shipment for this company. The company has received imports from many companies, but we are only interested in looking at the companies with perhaps the 5 highest imports to Mar del. Thus we will plot the graphs for only these 5 companies. We filter the data by referring to the tibble dataset above.\n\n\nShow code\n#Filter the dataset & arrange in descending order of weights\nMardel<- mc2_edges %>%\n  filter(to %in% 'Mar del Este CJSC') %>%\n  arrange(desc(weights))\n\n#Change the date format\nMardel2<- Mardel %>%\n  mutate (Year = as.yearmon(Year))\nMardel2 <- transform(Mardel2, Year = as.Date(Year, frac = 0))\n\n\nLooking at the plot, we can see that there is quite a large fluctuation in the frequency of shipments over the years for all 5 companies’ shipments to Mar del. While the frequency is increasing for Wave Watchers, the others are all decreasing. Specifically, Tristen Jetty, Ola de la Costa and Blue Horizon reach a peak in 2033 and then decrease sharply in 2034. It is possible that Mar del has stopped accepting shipments from them and now considers Wave Watchers as its main supplier/partner.\nHowever, we cannot definitively classify this as a red or green flag for IUU, as Mar del may have had its reasons for shifting to Wave Watchers, such as reliability, quality, or cost. To make a more accurate assessment, additional information is necessary - we may want to evaluate the reputation and track record of the companies involved, and conduct due diligence on their fishing practices, and adherence to regulations.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n#Wave Watchers Ltd.\nm1<- ggplot(Mardel2 %>% filter(from=='Wave Watchers Ltd. Liability Co'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Wave Watchers Ltd.', \n       x = 'Year', y =\"\") \n\n#Tristen Jetty Company Solutions\nm2<- ggplot(Mardel2 %>% filter(from=='Tristen Jetty Company Solutions'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Tristen Jetty', \n       x = 'Year', y =\"\") \n\n#Chuan gou N.V. Delivery\nm3<- ggplot(Mardel2 %>% filter(from=='Chuan gou  N.V. Delivery'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Chuan gou', \n       x = 'Year',\n       y='Number of Imports to Mar Del') \n\n#Ola de la Costa Ges.m.b.H.\nm4<- ggplot(Mardel2 %>% filter(from=='Ola de la Costa Ges.m.b.H.'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Ola de la Costa', \n       x = 'Year', y =\"\") \n\n#Blue Horizon Family &\nm5<- ggplot(Mardel2 %>% filter(from=='Blue Horizon Family &'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Blue Horizon Family &', \n       x = 'Year', y =\"\") \n\ngirafe(code = print(m1 / m2 / m3 / m4 / m5),\n       width_svg = 6,\n       height_svg =10)\n\n\n\n\n\n\n\nInsight 5 - Visualising Highest Number of Exports - Blue Horizon Family\n\nNetwork Graph\nLet’s summarise the top 10 nodes which have the highest centrality for out-degree. These are the companies which carry out the most exports. Knowing this information can help us detect illegal fishing in a few ways:\n\nMonitoring and oversight can be focused on these high-volume exporters, as they may have a higher risk of being involved in illegal fishing or trading of illicit seafood products.\nWe can delve deeper into the export patterns to identify the regions and countries these companies are exporting to, and identify if there are any areas where illegal fishing practices may be more prevalent.\nKnowing which companies export the most provide officials an opportunity to be able to scrutinize their records, so that they can check if the companies are compliant with regulations, such as catch documentation schemes or sustainability certifications. This will prevent the trade of illegally caught or unreported seafood.\n\n\n\nShow code\noutdeg_graph<- centrality_graph %>% \n  activate(\"nodes\") %>% \n  as_tibble() %>% \n  arrange(desc(out_deg_centrality)) %>% \n  select(id,out_deg_centrality) %>% \n  head(n=10)\n\n\nDT::datatable(outdeg_graph, class = \"compact\", colnames = c(\"Name of Company\",\"Out-Degree Centrality\"),\n              caption = 'Table 2: Top 10 Companies by Out-Degree')\n\n\n\n\n\n\n\nAs with Mar del, let’s map the graph of the company with highest exports to see how its networks look like, and their shipping patterns. We need to aggregate the edges such that the frequency of shipments are collapsed over the years, as per the following code chunk.\n\n\nShow code\n#Filter edge data\nBlue_ego<- mc2_edges %>%\n  filter(from %in% 'Blue Horizon Family &') \n\n#Group by from and to, to collapse across the years\nBlue_ego_agg <- Blue_ego %>%\n  group_by(from, to) %>%\n  summarise(sumweights = sum(weights), .groups = 'drop') %>%\n  filter(from != to) %>%\n  arrange(desc(sumweights)) %>%\n  ungroup() \n\n#Check the data!\nBlue_ego_agg\n\n\n# A tibble: 22 × 3\n   from                  to                                     sumweights\n   <chr>                 <chr>                                       <int>\n 1 Blue Horizon Family & \"Madagascar Coast  AG Freight \"              1448\n 2 Blue Horizon Family & \"Mar del Este CJSC\"                           754\n 3 Blue Horizon Family & \"Costa de la Felicidad Shipping\"              697\n 4 Blue Horizon Family & \"Orange River   Incorporated Shipping\"        646\n 5 Blue Horizon Family & \"Pao gan SE Seal\"                             347\n 6 Blue Horizon Family & \"Caracola del Sol Services\"                   332\n 7 Blue Horizon Family & \"Lake Chad  Company Ray\"                      177\n 8 Blue Horizon Family & \"hǎi dǎn Corporation Wharf\"                   154\n 9 Blue Horizon Family & \"Isla del Tesoro GmbH & Co. KG Chart\"         108\n10 Blue Horizon Family & \"Adriatic Mackerel Ges.m.b.H. Family\"          96\n# ℹ 12 more rows\n\n\nBlue Horizon Family exports to 23 companies in total. Hovering over each of the edge will highlight the strength of each link, which is the total frequency of the shipments from Blue Horizon to each company. Select the following top 3 companies to see their total frequency of shipping - Madagascar Coast, Mar del and Costa de la Felicidad!\n\n\nShow code\n#Create tooltip for edges info\nBlue_ego_agg<- Blue_ego_agg %>%\n  mutate(title = paste('Strength of Link = ',sumweights))\n\n#Filter the dataset for nodes based on edges\nBlue_nodes <- nodes %>%\n  filter(id %in% c(\"id\", Blue_ego_agg$from, Blue_ego_agg$to))\n\n\nvisNetwork(Blue_nodes, Blue_ego_agg, main = \"Network for Blue Horizon Family\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(color=list(hover = \"black\"), arrows = 'to',\n           smooth = list(enables = TRUE,\n                         type= 'curvedCW'),\n           shadow = FALSE,\n           dash = FALSE) %>%\n  visOptions(highlightNearest = list (enabled = TRUE, hover = TRUE),\n             nodesIdSelection = TRUE)\n\n\n\n\n\n\n\n\nShipping Patterns\nLet’s now look at the shipping pattern using the code chunk we did as above to only elicit the company with the highest number of exports, Blue Horizon Family.\n\n\nShow code\n#Filter the dataset & arrange in descending order of weights\nBlue<- mc2_edges %>%\n  filter(from %in% 'Blue Horizon Family &') %>%\n  arrange(desc(weights))\n\n#Change the date format\nBlue2<- Blue %>%\n  mutate (Year = as.yearmon(Year))\nBlue2 <- transform(Blue2, Year = as.Date(Year, frac = 0))\n\n\nLooking at the plot, we can see that there is quite a large fluctuation in the frequency of shipments over the years for all 5 companies’ shipments from Blue Horizon.\nWhile the frequency is increasing for Madagascar Coast and Pao gan, the other three all peak in 2033 and then have a sharp decrease for 2024. Similar to Insight 6, it is possible that Blue Horizon now considers Madagascar Coast and Pao gan as its main supplier/partners.\nAs above, we cannot definitively classify this as a red or green flag for IUU, and additional information is necessary to make a more accurate assessment.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n#Madagascar Coast AG Freight\nb1<- ggplot(Blue2 %>% filter(to=='Madagascar Coast  AG Freight '), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Madagascar Coast AG Freight', \n       x = 'Year', y =\"\") \n\n#Mar del Este CJSC\nb2<- ggplot(Blue2 %>% filter(to=='Mar del Este CJSC'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Mar del Este CJSC', \n       x = 'Year', y =\"\") \n\n#Orange River Incorporated Shipping\nb3<- ggplot(Blue2 %>% filter(to=='Orange River   Incorporated Shipping'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Orange River Incorporated Shipping', \n       x = 'Year',\n       y='Number of Imports from Blue Horizon Family') \n\n#Costa de la Felicidad Shipping\nb4<- ggplot(Blue2 %>% filter(to=='Costa de la Felicidad Shipping'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Costa de la Felicidad Shipping', \n       x = 'Year', y =\"\") \n\n#Pao gan SE Seal\nb5<- ggplot(Blue2 %>% filter(to=='Pao gan SE Seal'), aes(x=Year, y=weights)) +\n  geom_line( color=\"salmon\", size = 0.8) + \n  theme_classic()+\n  xlab(\"\") +\n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  labs(title='Pao gan SE Seal', \n       x = 'Year', y =\"\") \n\ngirafe(code = print(b1 / b2 / b3 / b4 / b5),\n       width_svg = 6,\n       height_svg =10)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-the-centrality-of-the-graph---betweenness-centrality",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#calculating-the-centrality-of-the-graph---betweenness-centrality",
    "title": "Mini Challenge 2 - VAST Challenge 2023",
    "section": "Calculating the Centrality of the Graph - Betweenness Centrality",
    "text": "Calculating the Centrality of the Graph - Betweenness Centrality\n\nInsight 6 - Visualising Highest Number of Betweenness\nWe will use the following code chunk to calculate the betweenness centrality measure.\n\n\nShow code\n#Create the network graph \nbtw_graph<- tbl_graph(nodes= mc2_nodes_extracted,\n                          edges = mc2_edges_aggregated,\n                          directed = TRUE)\n\n#Calculate the centrality measures\nbtw_graph<- btw_graph %>%\n  activate(\"nodes\") %>% \n  mutate(betweenness_centrality = centrality_betweenness(directed = TRUE))\n\n\nLet’s summarise the top 10 nodes which have the highest centrality for betweenness centrality.\nInterestingly, only one company has a value of 1 and the rest are 0. Usually, having a 0 betweenness centrality means that the graph is a complete one i.e., all nodes are connected to all others and thus there is no one node which enables better information flow than others.\nHowever, this is not logical as not all companies would be shipping to each other! Looking back at our data wrangling portion, it seems that filtering our edges file to only 1 HSCode may have strictly limited the number of nodes and edges. Thus by chance, the resulting graph was not one which had betweenness centrality.\n\n\n\n\n\n\nNote\n\n\n\nAt this point, it is wise to return to the data wrangling stage to include more HSCodes explore this. However, as this would affect the entire analysis, we will try again another time! :)\n\n\n\n\nShow code\nbtw_graph<- btw_graph %>% \n  activate(\"nodes\") %>% \n  as_tibble() %>% \n  arrange(desc(betweenness_centrality)) %>% \n  select(id,betweenness_centrality) %>% \n  head(n=10)\n\nDT::datatable(btw_graph, class = \"compact\", colnames = c(\"Name of Company\",\"Betweenness Centrality\"),\n              caption = 'Table 3: Top 10 Companies by Betweenness Centrality')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-class_Ex07",
    "section": "",
    "text": "In today’s in class exercise, Prof shared with us how to plot a horizon graph.\nA horizon graph is an analytical graphical method specially designed for visualising large numbers of time-series. It aims to overcome the issue of visualising highly overlapping time-series.\nIn this section, you will learn how to plot a horizon graph by using ggHoriPlot package.\n\nImport the R Packages\n\n\nShow code\npacman::p_load(ggHoriPlot, ggthemes, tidyverse)\n\n\n\n\nLoading the dataset\nFor the purpose of this hands-on exercise, Average Retail Prices Of Selected Consumer Items will be used.\n\n\nShow code\naverp <- read_csv(\"data/AVERP.csv\") %>%\n  mutate(`Date` = dmy(`Date`))\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, read_csv will import data in Date field as Character data type. dmy() of lubridate package to parse the Date field into appropriate Date data type in R.\n\n\n\n\nPlotting the horizon graph\nNote that there is no output for the below code chunk! Refer to the in-line comments for the logic behind the code.\n\n\nShow code\naverp %>% \n  #filter the data as necessary\n  filter(Date >= \"2018-01-01\") %>%\n  #we want to ensure only the filtered data will be placed into ggplot, so we do the above first before coding the line below\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  #we placed in ` because there's a space in the csv file for the header! So we put in the ` to ensure that it recognises as one field name. The ~ is to state it as a facet grid. \n  facet_grid(`Consumer Items`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'BuPu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  }
]