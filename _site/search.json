[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello there, my name is Sherinah!\nI am currently taking the Visual Analytics and Applications course in SMU.\nIn this website, you will find my attempts at completing the coursework, and I hope you will find it informative and aesthetically pleasing!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launch-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "1.2.1 Install and launch R packages",
    "text": "1.2.1 Install and launch R packages\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\nThe code chunk below uses p_load() of pacman package to check if tidyverse package is installed.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "1.2.2 Importing the Data",
    "text": "1.2.2 Importing the Data\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, part of the tidyverse package.\n\n\nexam_data <-read_csv(\"data/Exam_data.csv\")\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "1.3.1 R Graphics vs ggplot",
    "text": "1.3.1 R Graphics vs ggplot\nLet’s compare how R Graphics and ggplot a simple histogram.\n\nR Graphicsggplot\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"white\", \n                 fill=\"lightpink2\") +\n  ggtitle(\"Distribution of Maths Scores\") +theme_classic() \n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. There are seven grammars of ggplot2:\n\nData: The dataset being plotted\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots)\nStatistics, statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic\nThemes modify all non-data components of a plot, such as main title, sub-title, y-axis title, or legend background"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y-axis scale is not very useful and in fact, is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "1.7.3 Geometric Objects: geom_histogram",
    "text": "1.7.3 Geometric Objects: geom_histogram\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1",
    "section": "1.7.4 Modifying a geometric object by changing geom",
    "text": "1.7.4 Modifying a geometric object by changing geom\nIn the code chunk below:\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with pastel blue color,\ncolor argument is used to change the outline colour of the bars in black, and\ntheme_classic() is used to make the background minimalist.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"white\",      \n                 fill=\"slategray1\") + theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1",
    "section": "1.7.5 Modifying a geometric object by changing aes",
    "text": "1.7.5 Modifying a geometric object by changing aes\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nlibrary(viridis)  \n\nLoading required package: viridisLite\n\nggplot(data=exam_data, \n       aes(x= MATHS, fill= GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\") +   theme_classic() +\n  scale_fill_hue(l=80, c=80)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour and fill of the geometric object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1",
    "section": "1.7.6 Geometric Objects: geom-density",
    "text": "1.7.6 Geometric Objects: geom-density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays the list of continuous values. It visualises five summary statistics (the median, two hinges and two whiskers), and all outlier points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER, fill = GENDER)) +    \n  geom_boxplot() + theme_classic() +\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER, fill = GENDER)) +    \n  geom_boxplot(notch=TRUE) + theme_classic() +\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in a violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER, fill = GENDER)) +\n  geom_violin() + theme_classic() +\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "1.7.9 Geometric Objects: geom_point",
    "text": "1.7.9 Geometric Objects: geom_point\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH, color=GENDER)) +\n  geom_point() + theme_classic()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER, fill=GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5) + theme_classic() +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---stat_summary-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.1 Working with stat() - stat_summary method",
    "text": "1.8.1 Working with stat() - stat_summary method\nThe boxplots above in Section 1.7.7 were incomplete because the positions of the means were not shown. The code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER, fill = GENDER)) +    \n  geom_boxplot() + theme_classic() +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"black\",        \n               size=2)+\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---geom-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.2 Working with stat() - geom() method",
    "text": "1.8.2 Working with stat() - geom() method\nThe code chunk below adding mean values by using geom() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER, fill = GENDER)) +    \n  geom_boxplot() + theme_classic() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"black\",          \n             size=2) +\n  theme(legend.position=\"none\") +\n  scale_fill_hue(l=80, c=80)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "1.8.3 Adding a best-fit curve on a scatterplot",
    "text": "1.8.3 Adding a best-fit curve on a scatterplot\nThe scatterplot above in Section 1.7.9 showed the relationship of Maths and English grades of pupils. The interpretability of the graph can be improved by adding a best fit curve. In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point() + theme_classic() +\n  geom_smooth(linewidth=0.5)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point() + theme_classic() +\n  geom_smooth(method=lm, linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.The code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, fill=\"salmon\") + theme_classic() +\n  facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "title": "Hands-on Exercise 1",
    "section": "1.9.2 Working with facet_grid()",
    "text": "1.9.2 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.The code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, fill=\"salmon\") + theme_classic() +\n  facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\nBy default, the bar chart of ggplot2 is in vertical form. Adding coord_flip() flips the horizontal bar chart into a vertical bar chart.\n\nggplot(data = exam_data, \n       aes(x = RACE, fill= RACE)) + \n  geom_bar() +\n  xlab (\"Race\") +\n  ylab(\"Number of Students\") +\n  scale_fill_brewer(palette=\"Pastel2\") +\n  theme_classic() + \n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\nThe scatterplot in Section 1.7.9 is slightly misleading because the y-axis and x-axis ranges are not equal. See below for the amended code block.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +\n  geom_point() + theme_classic() +\n  geom_smooth(method=lm, linewidth=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on_Ex02",
    "section": "2.2.1 Installing and loading the required libraries",
    "text": "2.2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on_Ex02",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\nFor the purpose of this exercise, as in Hands-on Exercise 1, a data file called Exam_data will be used.\n\nexam_data <-read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on_Ex02",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on_Ex02",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others. In the example below, The Economist theme is used.It also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthemes-package",
    "title": "Hands-on_Ex02",
    "section": "2.4.2 Working with hrbthemes package",
    "text": "2.4.2 Working with hrbthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nThe axis_title_size argument is used to increase the font size of the axis title to 18\nThe base_size argument is used to increase the default axis label to 15\nThe grid argument is used to remove the x-axis grid lines"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-on_Ex02",
    "section": "2.5.1 Creating Composite Graphics: Patchwork methods",
    "text": "2.5.1 Creating Composite Graphics: Patchwork methods\nThere are several ggplot2 extension’s functions to support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, an ggplot2 extension called patchwork will be used to combine separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot is!\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Ex02",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composites by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs\n“/” operator to place the plots beside each other\n“()” operator the define the sequence of the plotting\n\nTo learn more about, refer to Plot Assembly.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) &\n  theme(title=element_text(size=7, face ='bold'))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Ex02",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\ngrid <- ((p1 / p2) | p3) + plot_annotation(tag_levels = 'I') \ngrid & theme(title=element_text(size=7, face ='bold'))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on_Ex02",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout, with inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\np12 <- p1|p2\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on_Ex02",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist() + theme(title=element_text(size = 6, face ='bold'), \n                                      axis.title.y=element_text(size = 9), axis.title.x=element_text(size = 9))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Using p_load() of pacman package to load tidyverse.\n\npacman::p_load(tidyverse)\n\nImporting the data.\n\nexam_data <-read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#working-with-theme",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#working-with-theme",
    "title": "In-class Exercise 1",
    "section": "1.2 Working with theme",
    "text": "1.2 Working with theme\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() + \n  theme(panel.background = element_rect(fill = \"#ADD8E6\",\n                                linewidth = 2, linetype = \"solid\"),\n  panel.grid.major = element_line(linewidth = 0.5, \n                                  linetype = 'solid',\n                                colour = \"white\"), \n  panel.grid.minor = element_line(linewidth = 0.25, \n                                  linetype = 'solid',\n                                colour = \"white\"))+\n  coord_flip()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-i",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-i",
    "title": "In-class Exercise 1",
    "section": "1.3 Designing Data-drive Graphics for Analysis I",
    "text": "1.3 Designing Data-drive Graphics for Analysis I\n\n1.3.1 The original design\nA simple vertical bar chart for frequency analysis. Critical analysis:\n\ny-axis label is not clear (i.e., count)\nTo support effective comparison, the bars should be sorted by their respective frequencies.\nFor static graph, frequency values should be added to provide additional information.\n\n\n\n\n\n\n\n\n1.3.2 Makeover!\n\nThe makeover designThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x= reorder (RACE,RACE,\n                           function(x)-length(x)))) +\n  geom_bar() + \n  ylim(0, 220) +\n  xlab (\"Race\") +\n  ylab(\"Number of Students\") +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100, 1), \"%\")),\n      vjust=-1)\n\n\n\n\nAlternatively, this code chunk uses fct_infreq() of forcats package.\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-ii",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-ii",
    "title": "In-class Exercise 1",
    "section": "1.4 Designing Data-drive Graphics for Analysis II",
    "text": "1.4 Designing Data-drive Graphics for Analysis II\n\n1.4.1 The original design\nA histogram of the Math scores:\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20)    \n\n\n\n\n\n\n1.4.2 Makeover!\n\nThe makeover designThe code chunk\n\n\n\nAdding mean and median lines on the histogram plot.\nChange fill and line color\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins=20, fill=\"lightblue\", color =\"black\") +\n  geom_vline(aes(xintercept=mean(MATHS),\n            color=\"Mean\"), linetype=\"dashed\", size=1) + \n    geom_vline(aes(xintercept=median(MATHS),\n            color=\"Median\"), linetype=\"dashed\", size=1) +\n    scale_color_manual(name = \"Statistics\", \n                       values = c(Median = \"blue\", Mean = \"red\")) +\n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iii",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iii",
    "title": "In-class Exercise 1",
    "section": "1.5 Designing Data-drive Graphics for Analysis III",
    "text": "1.5 Designing Data-drive Graphics for Analysis III\n\n1.5.1 The original design\nThe histograms below are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\n\nggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram() +\n  facet_wrap(~ GENDER) \n\n\n\n\n\n\n1.5.2 Makeover!\n\nThe makeover designThe code chunk\n\n\nThe background histograms show the distribution of English scores for all pupils.\n\n\n\n\n\n\n\n\nd_bg <- exam_data[, -3]  \n\nggplot(exam_data, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iv",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#designing-data-drive-graphics-for-analysis-iv",
    "title": "In-class Exercise 1",
    "section": "1.6 Designing Data-drive Graphics for Analysis IV",
    "text": "1.6 Designing Data-drive Graphics for Analysis IV\n\n1.6.1 The original design\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n1.6.2 Makeover!\n\nThe makeover designThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y = ENGLISH)) +\n  geom_point() +\n  xlim(0,100) + \n  ylim(0,100) +\n  geom_hline(yintercept = 50, linetype=\"dashed\", \n             color = \"gray\", size=1) +\n  geom_vline(xintercept = 50, linetype=\"dashed\", \n             color = \"gray\", size=1)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to Sherinah’s page for Visual Analytics and Applications!\nIn this website, you will find my attempts at completing the coursework, and I hope you will find it informative and aesthetically pleasing!"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Demographics & Financial Analysis of City of Engagement",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.\nThis take-home exercise will explore the demographic and financial characteristics of the city of Engagement using static and interactive statistical graphics methods. The data will be processed using the tidyverse family of packages and the visualisations developed using ggplot2 and its extensions.\nSpecifically, this exercise seeks to fulfill the following objectives using Exploratory & Confirmatory Data Analysis:\n\nExplore the factors influencing joviality index and\nExplore the factors influencing income.\n\n\n\n\nTwo data sets in csv format are provided for the purpose of this exercise - Participants & Financial Journal.\n\n\nThis dataset contains information about the residents of City of Engagement that have agreed to participate in this study and comprises the following fields:\n\nData Fields - Participants.csv\n\n\n\n\n\n\nField\nDescription\n\n\n\n\nparticipantId (integer)\nUnique ID assigned to each participant\n\n\nhouseholdSize (integer)\nNumber of people in the household\n\n\nhaveKids (boolean)\nPresence of children in the household\n\n\nage (integer)\nParticipant’s age in years at the start of the study\n\n\neducationLevel\n(string factor)\nParticipant’s education level\n[Low, HighSchoolorCollege, Bachelors, Graduate]\n\n\ninterestGroup (char)\nCharacter representing the participant’s stated primary interest group [A,B,C,D,E,F,G,H,I,J]\n\n\njoviality (float)\nValue ranging from [0,1] indicating the participant’s overall happiness level at the start of the study\n\n\n\n\n\n\nThis dataset contains information about the residents of City of Engagement that have agreed to participate in this study and comprises the following fields:\n\nData Fields - FinancialJournal.csv\n\n\n\n\n\n\nField\nDescription\n\n\n\n\nparticipantId (integer)\nUnique ID assigned to each participant\n\n\ntimestamp (datetime)\nTime when the check-in was logged\n\n\ncategory\n(string factor)\nString describing the expense category\n[Education, Food, Recreation, RentAdjustment, Shelter, Wage]\n\n\namount (double)\nAmount of the transaction\n\n\n\n\n\n\nThere are a few data quality issues with the datasets:\n\nThe timestamp information in the FinancialJournal.csv is too granular and should be changed to reflect the month and year instead.\nA quick analysis showed that there were duplicates in the data; these will be removed to ensure the data will not be skewed.\nThe quick analysis also highlighted that there were some participants who did not have entries for all 6 months; it is possible that they are no longer residents of the City. Since the aim of this exercise is to explore the financial trends of the residents, these participants will be removed.\nThe data is on an individual level and thus will be aggregated accordingly for the analyses.\nThe data types have to be checked as well.\nAfter addressing the above issues, the datasets should be combined to ensure a comprehensive and accurate analysis."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-preparation",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-preparation",
    "title": "Demographics & Financial Analysis of City of Engagement",
    "section": "2. Data Preparation",
    "text": "2. Data Preparation\n\n2.1 Install and Launch R packages\nIn this exercise, the following packages will be used: tidyverse, ggplot2, dplyr, patchwork, ggthemes, hrbrthemes, and ggrepel. The codechunk below will be used to check if these packages have been installed and also will load them onto the working R environment:\n\n\nShow code\npacman::p_load(ggrepel, patchwork, ggplot2, dplyr,\n               ggthemes, hrbrthemes, zoo, DT,\n               tidyverse) \n\n\n\n\n2.2 Import Datasets\nThe code chunk below imports the datasets into R environment by using read_csv() function of readr package as part of tidyverse.\n\n\nShow code\nppt <-read_csv(\"data/Participants.csv\", show_col_types = FALSE)\nfj <- read_csv(\"data/FinancialJournal.csv\", show_col_types = FALSE)\n\n\nThe summary and spec() function is used to provide an overview of the central tendencies, and data types of the datasets.\n\n\nShow code\nsummary(ppt)\n\n\n participantId    householdSize    haveKids            age       \n Min.   :   0.0   Min.   :1.000   Mode :logical   Min.   :18.00  \n 1st Qu.: 252.5   1st Qu.:1.000   FALSE:710       1st Qu.:29.00  \n Median : 505.0   Median :2.000   TRUE :301       Median :39.00  \n Mean   : 505.0   Mean   :1.964                   Mean   :39.07  \n 3rd Qu.: 757.5   3rd Qu.:3.000                   3rd Qu.:50.00  \n Max.   :1010.0   Max.   :3.000                   Max.   :60.00  \n educationLevel     interestGroup        joviality       \n Length:1011        Length:1011        Min.   :0.000204  \n Class :character   Class :character   1st Qu.:0.240074  \n Mode  :character   Mode  :character   Median :0.477539  \n                                       Mean   :0.493794  \n                                       3rd Qu.:0.746819  \n                                       Max.   :0.999234  \n\n\nShow code\nspec(ppt)\n\n\ncols(\n  participantId = col_double(),\n  householdSize = col_double(),\n  haveKids = col_logical(),\n  age = col_double(),\n  educationLevel = col_character(),\n  interestGroup = col_character(),\n  joviality = col_double()\n)\n\n\n\n\nShow code\nsummary(fj)\n\n\n participantId      timestamp                        category        \n Min.   :   0.0   Min.   :2022-03-01 00:00:00.00   Length:1513636    \n 1st Qu.: 222.0   1st Qu.:2022-05-24 13:25:00.00   Class :character  \n Median : 464.0   Median :2022-08-25 15:00:00.00   Mode  :character  \n Mean   : 480.9   Mean   :2022-08-26 05:00:48.42                     \n 3rd Qu.: 726.0   3rd Qu.:2022-11-27 07:25:00.00                     \n Max.   :1010.0   Max.   :2023-02-28 23:55:00.00                     \n     amount         \n Min.   :-1562.726  \n 1st Qu.:   -5.594  \n Median :   -4.000  \n Mean   :   20.047  \n 3rd Qu.:   21.598  \n Max.   : 4096.526  \n\n\nShow code\nspec(fj)\n\n\ncols(\n  participantId = col_double(),\n  timestamp = col_datetime(format = \"\"),\n  category = col_character(),\n  amount = col_double()\n)\n\n\n\n\n2.3 Data Wrangling\n\n2.3.1 Participants Dataset\nFirstly, the age variable is binned with the following code chunk. The mutate() function of dplyr is used to create a new variable called Age_Category while preserving the existing variable of age.\n\n\nShow code\nppt <- ppt %>%\n  mutate(Age_Category=cut(age, \n                          breaks=c(17, 20, 30, 40, 50, 60),\n                          labels=c('20 & Below', '21-30', '31-40', \n                                   '41-50', '51 and above')))\n\n# Check if the ages are reflected correctly\nhead(ppt$age)\nhead(ppt$Age_Category)\n\n\nNext, a few of the columns were not set to the appropriate data type. For example, participantID should be categorical but it shows as a continuous numeric variable. Further, we would need the education level to be read as an ordinal factor as there are levels for education. As above, the mutate() function will be used to update the data types.\n\n\nShow code\nppt <- ppt %>% mutate(participantId = as.factor(participantId))\nppt <- ppt %>% mutate(educationLevel = factor(educationLevel, \n                                              levels=c(\"Low\", \"HighSchoolOrCollege\", \"Bachelors\", \"Graduate\")))\n\n# Check data types\nstr(ppt)\n\n\nLastly, we will rename the other columns for nicer formatting and ease of reading with the below code chunk. As we are not making changes to the values, the column names will be amended in place.\n\n\nShow code\nppt <- ppt %>%\n  rename('ParticipantID' = 'participantId', \n         'HouseholdSize' = 'householdSize', \n         'EducationLevel' = 'educationLevel', \n         'InterestGroup' = 'interestGroup', \n         'Joviality' = 'joviality',\n         'HaveKids' = 'haveKids')\n\n# Check if the changes are reflected correctly\ncolnames(ppt)\n\n\n\n\n2.3.2 FinancialJournal Dataset\nAs stated in section 1.2.3 Challenges, there are a number of issues with the dataset.\nFirstly, the data type for participantId was changed as above.\n\n\nShow code\nfj <- fj %>% mutate(participantId = as.factor(participantId))\n\n# Check data types\nstr(fj)\n\n\nNext, there are some duplicate rows in the dataset which have to be removed using the distinct() function. As the code below shows, there were 1,113 duplicate rows in the FinancialJournal dataset.\n\n\nShow code\nfj_2 <- fj %>% distinct()\nnrow(fj) - nrow(fj_2)\n\n\n[1] 1113\n\n\nNext, there were some participants who did not have entries for all 6 months. To find the these participants, first the data was grouped by the participantId. Examination of the results show that there are 131 participants which have lower than 1,000 transactions.\n\n\nShow code\nfj_2 %>%\n  group_by(participantId) %>%\n  summarize(transaction_count = n()) %>%\n  arrange(transaction_count)\n\n\nThe code chunk below will filter out these 131 participants. The data frame fj_final now has no duplicates, and only residents who still live in City of Engagement.\n\n\nShow code\nfj_final <- subset(fj_2, with(fj_2, participantId %in% \n                            names(which(table(participantId)>=1000))))\nhead(fj_final)\n\n\nNext, we would want to convert all of the timestamp data into Month-Year format for ease of comparison using the first line of code. However, the result would be in character format which is not advisable for analysis, and so we will run the subsequent line of code to change it to Date format.\n\n\nShow code\nfj_final <- fj_final %>%\n  mutate (Year_month = as.yearmon(timestamp))\n\nfj_final <- transform(fj_final, Year_month = as.Date(Year_month, frac = 0))\n\nhead(fj_final)\n\n\n  participantId  timestamp  category     amount Year_month\n1             0 2022-03-01      Wage 2472.50756 2022-03-01\n2             0 2022-03-01   Shelter -554.98862 2022-03-01\n3             0 2022-03-01 Education  -38.00538 2022-03-01\n4             1 2022-03-01      Wage 2046.56221 2022-03-01\n5             1 2022-03-01   Shelter -554.98862 2022-03-01\n6             1 2022-03-01 Education  -38.00538 2022-03-01\n\n\nFurther, most of the values are negative as they reflect expenditures for food, education, recreation and shelter. The positive amounts are for wage and rent adjustment. The data will also be changed from long to wide format for easier reading using the pivot_wider() function.\n\n\nShow code\nfj_final$amount <- abs(fj_final$amount)\nfj_final$amount <- round(fj_final$amount,digits=0)\n\nfj_wide <- fj_final %>%\n  group_by(participantId, Year_month, category) %>%\n  summarise(Total = sum(amount)) %>%\n  pivot_wider(names_from = category, values_from = Total)\n\n# Replace NA values with 0 for Rent Adjustment\nfj_wide[is.na(fj_wide)] <- 0\n\nhead(fj_wide)\n\n\nTo find out the cost of living and total income of the residents, the values of the expenses for the four categories, and the wage and rent adjustment will be summed up respectively. We will also derive the total savings i.e. Total income - Cost of living.\n\n\nShow code\nfj_wide$Cost_of_living <- fj_wide$Education + \n  fj_wide$Food + fj_wide$Recreation + \n  fj_wide$Shelter\n\nfj_wide$Total_Income <- fj_wide$Wage + \n  fj_wide$RentAdjustment\n\nfj_wide$Total_Savings <- fj_wide$Total_Income - fj_wide$Cost_of_living\n\n\nLastly, we will rename the participantId column in place for consistency.\n\n\nShow code\nfj_wide <- fj_wide %>%\n  rename('ParticipantID' = 'participantId')\n\n# Check if the changes are reflected correctly\ncolnames(fj_wide)\n\n\n\n\n2.3.3 Combining the Datasets\nDT::datatable(fj_wide, class = “compact”)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#visualisations-insights",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#visualisations-insights",
    "title": "Demographics & Financial Analysis of City of Engagement",
    "section": "3. Visualisations & Insights",
    "text": "3. Visualisations & Insights"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#key-takeaways",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#key-takeaways",
    "title": "Demographics & Financial Analysis of City of Engagement",
    "section": "4. Key Takeaways",
    "text": "4. Key Takeaways"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class_Ex04",
    "section": "",
    "text": "In today’s in class exercise, Prof shared with us how to combine a qqplot and tabular results of Shapiro test in a single plot."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#import-libraries",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#import-libraries",
    "title": "In-class_Ex04",
    "section": "Import libraries",
    "text": "Import libraries\nThe new libraries used today are :\n\nrstatic: Allows us to perform basic statistical tests, including t-test, Wilcoxon test, ANOVA, Kruskal-Wallis and correlation analyses.\ngt() : starting from a tibble table, customise a table and export in various formats. Most importantly, it works with patch. We will save the tabular results from shapiro test as gt object and export using gtsave() into .png file later.\nNote:\nImporting tidyverse: will automatically provide read_r() <- for read_csv()\n\n\npacman::p_load(rstatix, gt, patchwork,tidyverse,nortest,webshot2)\n\n\nexam <- read_csv('data/Exam_data.csv')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#background-info",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#background-info",
    "title": "In-class_Ex04",
    "section": "Background info",
    "text": "Background info\n\nThe Anderson_darling test\nUsually, when we check for normality of a distribution, we can use the Anderson-darling test or the Shapiro test. Hitting the three commands below will give us the results, but no visualisation.\n\nad.test(exam$ENGLISH)\n\n\n    Anderson-Darling normality test\n\ndata:  exam$ENGLISH\nA = 4.3661, p-value = 7.341e-11\n\n\n\n\nThe shapiro.test\nUsing shapiro.test will generate result as a HTML object.\n\nshapiro.test(exam$ENGLISH)\n\n\n    Shapiro-Wilk normality test\n\ndata:  exam$ENGLISH\nW = 0.9543, p-value = 1.811e-08\n\n\nUsing shapiro_test will generate result as a tibble object.\n\nexam %>% \n  shapiro_test(ENGLISH)\n\n# A tibble: 1 × 3\n  variable statistic            p\n  <chr>        <dbl>        <dbl>\n1 ENGLISH      0.954 0.0000000181\n\n\n\n\nQQplot\nWe can also generate the qqplot to check for normality. However qqplot does not print any p-values.\n\nggplot(exam,\n       aes(sample=ENGLISH)) +  #<<< use a new argument call sample: el scores\n  stat_qq() +\n  stat_qq_line()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#task-for-today",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#task-for-today",
    "title": "In-class_Ex04",
    "section": "Task for today:",
    "text": "Task for today:\n\nCombine qqplot with results from Shapiro-test.\nRecall that in hands-on 3, we use DT to create an interactive table , however it is not recognized by patchwork.\nWe start by storing the shapiro test in a tibble table as shown above. Then we will use the gt() package and export it as a .png using gtsave().\n\nqq <- ggplot(exam,\n       aes(sample=ENGLISH)) +  #<<< use a new argument call sample: el scores\n  stat_qq() +\n  stat_qq_line()\n\nsw_t <- exam %>% \n  shapiro_test(ENGLISH) %>% gt()   #<<< make into a gt format (will give a nice table)  shapiro.test is not used here as it gives output in another format.\n\ntmp <- tempfile(fileext = '.png') # create  temp table\ngtsave(sw_t, tmp)  # use gtsave() to save sw_t into tmp folder\ntable_png <- png::readPNG(tmp, native = TRUE)\n\nqq+table_png\n\n\n\n\nI tried to customise the gt() table.\n\nqq <- ggplot(exam,\n       aes(sample=ENGLISH)) +  #<<< use a new argument call sample: el scores\n  stat_qq() +\n  stat_qq_line()\n\nsw_t <- exam %>% \n  shapiro_test(ENGLISH) %>% gt()  %>%  \n  tab_header(\n    title = 'Shapiro Test for Normality',\n    subtitle = 'English scores')\n\ntmp <- tempfile(fileext = '.png') # create  temp table\ngtsave(sw_t, tmp)  # use gtsave() to save sw_t into tmp folder\ntable_png <- png::readPNG(tmp, native = TRUE)\n\nqq+table_png  # use patchwork to stitch\n\n\n\n\nThe results of the Shapiro test shows that p-value < 0.05 and we have enough statistical evidence to reject the null hypothesis and conclude that English scores do not follow normal distribution."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-Class Exercise 5",
    "section": "",
    "text": "Today’s hands-on exercise is about network visualisation, where four network data modelling and visualisation packages will be installed and launched."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#the-dataset",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#the-dataset",
    "title": "In-Class Exercise 5",
    "section": "1.1 The Dataset",
    "text": "1.1 The Dataset\nThe dataset used are from an oil exploration and extraction company. There are two data sets. One contains the data on nodes and the other contains the edges (also know as links) data.\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\nLet’s first load the packages and datasets to be used.\n\n\nShow code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\n\n\nShow code\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\", show_col_types = FALSE)\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#cleaning-the-dataset",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#cleaning-the-dataset",
    "title": "In-Class Exercise 5",
    "section": "1.2 Cleaning The Dataset",
    "text": "1.2 Cleaning The Dataset\nWe will examine the structure of the data frame using glimpse() of dplyr.\n\n\nShow code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. Before we continue, it is important for us to change the data type of SentDate field to “Date”” data type.The code chunk below will be used to perform the changes.\n\n\nShow code\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation. In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week. Take note to (i) ungroup after you have used the group_by() function so that you can alter how you want to use group_by() for subsequent code chunks, and (ii) filter only those records where the source does not equal to target to ensure only unique interactions will be visualised later.\n\n\nShow code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\nNow let’s review the aggregated dataset. It looks great, good job!\n\n\nShow code\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#network-objects",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#network-objects",
    "title": "In-Class Exercise 5",
    "section": "1.3 Network Objects",
    "text": "1.3 Network Objects\nWe will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame. Let’s review how the graph looks.\n\n\nShow code\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\nShow code\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 54 × 4\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag…\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ℹ 48 more rows\n#\n# A tibble: 1,372 × 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands on Ex 5",
    "section": "",
    "text": "Today’s hands-on exercise is about network visualisation, where four network data modelling and visualisation packages will be installed and launched."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dataset",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dataset",
    "title": "Hands on Ex 5",
    "section": "1.1 The Dataset",
    "text": "1.1 The Dataset\nThe dataset used are from an oil exploration and extraction company. There are two data sets. One contains the data on nodes and the other contains the edges (also know as links) data.\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\nLet’s first load the packages and datasets to be used.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\", show_col_types = FALSE)\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dataset-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-dataset-1",
    "title": "Hands on Ex 5",
    "section": "1.2 The Dataset",
    "text": "1.2 The Dataset\nWe will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. Before we continue, it is important for us to change the data type of SentDate field to “Date”” data type.The code chunk below will be used to perform the changes.\n\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation. In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\nNow let’s review the aggregated dataset. It looks great, good job!\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take Home Ex 2",
    "section": "",
    "text": "This Take-Home exercise is about network visualisation."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-dataset",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#the-dataset",
    "title": "Take Home Ex 2",
    "section": "1.1 The Dataset",
    "text": "1.1 The Dataset\nThe dataset used is from the VAST Challenge 2023. Let’s first load the packages and dataset to be used.\n\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse)\n\n\n# The front part before :: is to load the package.\n\nMC1 <- jsonlite::fromJSON(\"data/MC1.json\")\n\nThe data is in list format but we need to change it into a tabular format. We also will use the select() function to reorganise the structure of the dataset.\n\nMC1_nodes <- as_tibble(MC1$nodes) %>%\n  select(id, type, country)\n\nMC1_edges <- as_tibble(MC1$links) %>% select(source, target, type, weight, key)"
  }
]