{
  "hash": "838014946318a1d2bee258671e262dc4",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 4A\"\nauthor: \"Sherinah Rashid\"\neditor: visual\nformat:\n  html: \n    code-fold: true\n    code-summary: \"Show code\"\n    code-overflow: wrap\n    code-block-bg: true\n    code-block-border-left: \"#18661c\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: auto\n---\n\n\n# Part 1: Visualising Distribution\n\nVisualising distribution is not new in statistical analysis. In chapter 1 we shared some of the popular statistical graphics methods for visualising distributions, such as histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we will explore two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n## Getting Started\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\n-   tidyverse, a family of R packages for data science process,\n\n-   ggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\n\n-   ggdist for visualising distribution and uncertainty.\n\n### Installing and loading the packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n### Data import\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n## Visualising Distribution with Ridgeline Plot\n\n*Ridgeline plot* (sometimes called *Joyplot*) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap. The figure below is a ridgelines plot showing the distribution of English score by class.\n\n![](Image1.png)\n\n::: callout-note\n-   Ridgeline plots make sense when the number of groups to represent is medium to high, and a classic window separation would take too much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\n\n-   It works well when there is a clear pattern in the result e.g.if there is an obvious ranking in groups. Otherwise groups will tend to overlap each other, leading to a messy plot, thus not providing any insight.\n:::\n\n### Plotting ridgeline graph: ggridges method\n\nThere are several ways to plot ridgeline plot with R. In this section, we will learn how to plot ridgeline plot by using [ggridges](https://wilkelab.org/ggridges/) package.\n\nggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#E59481\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n:::\n\n### Varying fill colors along the x axis\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n:::\n\n### Mapping the probabilities directly onto colour\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nThe figure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represents the empirical cumulative density function for the distribution of English scores.\n\n::: callout-important\nIt is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.\n:::\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n:::\n\n### Ridgeline plots with quantile lines\n\nBy using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n:::\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n:::\n\n## Visualising Distribution with Raincloud Plot\n\nThe raincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a \"raincloud\". The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n### Plotting a Half Eye graph\n\nFirst, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package. This produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n:::\n\n### Adding the boxplot with geom_boxplot()\n\nNext, we will add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09.html) of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n:::\n\n### Adding the Dot Plots with stat_dots()\n\nNext, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = \"left\" to indicate we want it on the left-hand side.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n:::\n\n### Finishing touches\n\nLastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n:::\n\n# Part 2: Visual Statistical Analysis\n\nIn this hands-on exercise, we will use the following:\n\n-   ggstatsplot package to create visual graphics with rich statistical information,\n\n-   performance package to visualise model diagnostics, and\n\n-   parameters package to visualise model parameters\n\n## Visual Statistical Analysis with ggstatsplot\n\n-   [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\n    -   To provide alternative statistical inference methods by default.\n\n    -   To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n        ![](Image2.jpeg)\n\n## Getting Started\n\n### Installing and launching R packages\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n\n### Importing data\n\nWe will use the exam.csv dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\nas_tibble(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n```\n:::\n:::\n\n\n## Statistical Tests\n\n### One-sample test: gghistostats() method\n\nIn the code chunk below, [gghistostats()](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to to build an visual of one-sample test on English scores.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n```\n:::\n\n:::\n\n### Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\nThat's because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\n\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as:\n\n![](Image3.jpeg)\n\nThe [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n### How to interpret Bayes Factor\n\nA **Bayes Factor** can be any positive number. One of the most common interpretations is this one---first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagenmakers](https://www-tandfonline-com.libproxy.smu.edu.sg/doi/pdf/10.1080/00031305.1999.10474443?needAccess=true) in 2013:\n\n![](Image4.jpeg)\n\n### Two-sample mean test: ggbetweenstats()\n\nIn the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n```\n:::\n\n:::\n\n### Oneway ANOVA Test: ggbetweenstats() method\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\n::: callout-important\nChange the term accordingly to display the results as necessary:\n\n-   \"ns\" → only non-significant\n-   \"s\" → only significant\n-   \"all\" → everything\n:::\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n```\n:::\n\n:::\n\nBelow is a summary of between-subject tests that can be carried out for each type of analyses:\n\n![](Image5.jpeg)\n\n![](Image6.jpeg)\n\n![](Image7.jpeg)\n\n### Significant Test of Correlation: ggscatterstats()\n\nIn the code chunk below, [ggscatterstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n```\n:::\n\n:::\n\n### Significant Test of Association (Dependence) : ggbarstats() methods\n\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using [cut()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n```\n:::\n\n\nThe code chunk below [ggbarstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n```\n:::\n\n:::\n\n## Visualising Models\n\nIn this section, you will learn how to visualise model diagnostic and model parameters by using the parameters package.\n\nThe Toyota Corolla case study will be used to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.\n\n### Installing and loading the required libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, performance, parameters, see)\n```\n:::\n\n\n### Importing Excel file: readxl methods\n\nIn the code chunk below, [*read_xls()*](https://readxl.tidyverse.org/reference/read_excel.html) of [**readxl**](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R. Notice that the output object car_resale is a tibble data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n```\n:::\n:::\n\n\n## Regression Parameters\n\n\n### Multiple Regression Model using lm()\n\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n```\n:::\n:::\n\n\n### Model Diagnostic: Check for multicollinearity\nIn the below code chunk, we use the [check_collinearity()](https://easystats.github.io/performance/reference/check_collinearity.html) of [performance](https://easystats.github.io/performance/) package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_c <- check_collinearity(model)\nplot(check_c)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### Model Diagnostic: Check normality assumption\n\nIn the below code chunk, we use the [check_normality()](https://easystats.github.io/performance/reference/check_normality.html) of performance package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\ncheck_n <- check_normality(model1)\nplot(check_n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n### Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, [check_heteroscedasticity()](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of performance package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n### Model Diagnostic: Complete check\nWe can also perform the complete checks of the assumptions above by using [check_model()](https://easystats.github.io/performance/reference/check_model.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_model(model1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n### Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\n\n::: panel-tabset\n## Plot\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n## Code\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nplot(parameters(model1))\n```\n:::\n\n:::\n\n\n### Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, [ggcoefstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.\n\n::: panel-tabset\n## Plot\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04A_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n## Code\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggcoefstats(model1, \n            output = \"plot\")\n```\n:::\n\n:::\n\n\n\n",
    "supporting": [
      "Hands-on_Ex04A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}