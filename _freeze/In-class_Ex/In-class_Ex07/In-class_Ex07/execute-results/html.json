{
  "hash": "e755621d45d61b33cdaf522add850c93",
  "result": {
    "markdown": "---\ntitle: \"In-class_Ex07\"\nauthor: \"Sherinah Rashid\"\ndate: '5 May 2023'\neditor: visual\nformat:\n  html: \n    code-fold: true\n    code-summary: \"Show code\"\n    code-overflow: wrap\n    code-block-bg: true\n    code-block-border-left: \"#18661c\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: auto\n---\n\n\nIn today's in class exercise, Prof shared with us how to plot a horizon graph. \n\nA horizon graph is an analytical graphical method specially designed for visualising large numbers of time-series. It aims to overcome the issue of visualising highly overlapping time-series. \n\nIn this section, you will learn how to plot a [horizon graph](http://www.perceptualedge.com/articles/visual_business_intelligence/time_on_the_horizon.pdf) by using [ggHoriPlot package](https://rivasiker.github.io/ggHoriPlot/).\n\n\n# Import the R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggHoriPlot, ggthemes, tidyverse)\n```\n:::\n\n\n# Loading the dataset\n\nFor the purpose of this hands-on exercise, [Average Retail Prices Of Selected Consumer Items](https://tablebuilder.singstat.gov.sg/table/TS/M212891) will be used. \n\n\n::: {.cell}\n\n```{.r .cell-code}\naverp <- read_csv(\"data/AVERP.csv\") %>%\n  mutate(`Date` = dmy(`Date`))\n```\n:::\n\n\n::: callout-note  \nBy default, read_csv will import data in Date field as Character data type. dmy() of lubridate package to parse the Date field into appropriate Date data type in R.\n:::\n\n# Plotting the horizon graph\n\nNote that there is no output for the below code chunk! Refer to the in-line comments for the logic behind the code. \n\n\n::: {.cell}\n\n```{.r .cell-code}\naverp %>% \n  #filter the data as necessary\n  filter(Date >= \"2018-01-01\") %>%\n  #we want to ensure only the filtered data will be placed into ggplot, so we do the above first before coding the line below\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  #we placed in ` because there's a space in the csv file for the header! So we put in the ` to ensure that it recognises as one field name. The ~ is to state it as a facet grid. \n  facet_grid(`Consumer Items`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'BuPu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "In-class_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}