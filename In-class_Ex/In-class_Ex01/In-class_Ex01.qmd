---
title: "In-class Exercise 1"
subtitle: "Programming Elegant DataVis with ggplot2"
author: "Sherinah Rashid"
---

## **1.1 Getting Started**

Using p_load() of pacman package to load tidyverse.

```{r}
pacman::p_load(tidyverse)
```

Importing the data.

```{r}
#| warning: false 
exam_data <-read_csv("data/Exam_data.csv")
```

## **1.2 Working with theme**

-   Changing the colors of plot panel background of `theme_minimal()` to light blue and the color of grid lines to white.

::: panel-tabset
#### The plot

```{r}
#| echo: false
#| warning: false
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() + 
  theme(panel.background = element_rect(fill = "#ADD8E6",
                                size = 2, linetype = "solid"),
  panel.grid.major = element_line(size = 0.5, linetype = 'solid',
                                colour = "white"), 
  panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
                                colour = "white"))+
  coord_flip()

```

#### The code chunk

```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() + 
  theme(panel.background = element_rect(fill = "#ADD8E6",
                                linewidth = 2, linetype = "solid"),
  panel.grid.major = element_line(linewidth = 0.5, 
                                  linetype = 'solid',
                                colour = "white"), 
  panel.grid.minor = element_line(linewidth = 0.25, 
                                  linetype = 'solid',
                                colour = "white"))+
  coord_flip()
```
:::

## **1.3 Designing Data-drive Graphics for Analysis I**

### **1.3.1 The original design**

A simple vertical bar chart for frequency analysis. Critical analysis:

-   y-axis label is not clear (i.e., count)

-   To support effective comparison, the bars should be sorted by their respective frequencies.

-   For static graph, frequency values should be added to provide additional information.

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

### **1.3.2 Makeover!**

::: panel-tabset
#### The makeover design

```{r}
#| echo: false
#| warning: false

ggplot(data=exam_data, aes(x= reorder (RACE,RACE,
                           function(x)-length(x)))) +
  geom_bar() + 
  ylim(0, 220) +
  xlab ("Race") +
  ylab("Number of Students") +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust=-1)

```

#### The code chunk

```{r}
#| eval: false
#| warning: false


ggplot(data=exam_data, aes(x= reorder (RACE,RACE,
                           function(x)-length(x)))) +
  geom_bar() + 
  ylim(0, 220) +
  xlab ("Race") +
  ylab("Number of Students") +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust=-1)
```
:::

Alternatively, this code chunk uses fct_infreq() of forcats package.

```{r}
#| echo: true
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))

```

## **1.4 Designing Data-drive Graphics for Analysis II**

### **1.4.1 The original design**

A histogram of the Math scores:

```{r}
#| warning: false
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins=20)    
```

### **1.4.2 Makeover!**

::: panel-tabset
#### The makeover design

-   Adding mean and median lines on the histogram plot.

-   Change fill and line color

```{r}
#| echo: false
#| warning: false

ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins=20, fill="lightblue", color ="black") +
  geom_vline(aes(xintercept=mean(MATHS),
            color="Mean"), linetype="dashed", size=1) + 
    geom_vline(aes(xintercept=median(MATHS),
            color="Median"), linetype="dashed", size=1) +
    scale_color_manual(name = "Statistics", values = c(Median = "blue", Mean = "red"))+
  theme(legend.position = "bottom")

```

#### The code chunk

```{r}
#| eval: false
#| warning: false


ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins=20, fill="lightblue", color ="black") +
  geom_vline(aes(xintercept=mean(MATHS),
            color="Mean"), linetype="dashed", size=1) + 
    geom_vline(aes(xintercept=median(MATHS),
            color="Median"), linetype="dashed", size=1) +
    scale_color_manual(name = "Statistics", 
                       values = c(Median = "blue", Mean = "red")) +
    theme(legend.position = "bottom")


```
:::

## **1.5 Designing Data-drive Graphics for Analysis III**

### **1.5.1 The original design**
The histograms below are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.

```{r}
#| warning: false
ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_histogram() +
  facet_wrap(~ GENDER) 
```


### **1.5.2 Makeover!**

::: panel-tabset
#### The makeover design

The background histograms show the distribution of English scores for all pupils.


```{r}
#| echo: false
#| warning: false

d_bg <- exam_data[, -3]  

ggplot(exam_data, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill = "grey", alpha = .5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = FALSE) +  
  theme_bw()

```

#### The code chunk

```{r}
#| eval: false
#| warning: false

d_bg <- exam_data[, -3]  

ggplot(exam_data, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill = "grey", alpha = .5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = FALSE) +  
  theme_bw()


```
:::

## **1.6 Designing Data-drive Graphics for Analysis IV**

### **1.6.1 The original design**

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y = ENGLISH)) +
  geom_point()
```


### **1.6.2 Makeover!**

::: panel-tabset
#### The makeover design


```{r}
#| echo: false
#| warning: false

ggplot(data=exam_data, 
       aes(x= MATHS, y = ENGLISH)) +
  geom_point() +
  xlim(0,100) + 
  ylim(0,100) +
  geom_hline(yintercept = 50, linetype="dashed", 
             color = "gray", size=1) +
  geom_vline(xintercept = 50, linetype="dashed", 
             color = "gray", size=1)

```

#### The code chunk

```{r}
#| eval: false
#| warning: false

ggplot(data=exam_data, 
       aes(x= MATHS, y = ENGLISH)) +
  geom_point() +
  xlim(0,100) + 
  ylim(0,100) +
  geom_hline(yintercept = 50, linetype="dashed", 
             color = "gray", size=1) +
  geom_vline(xintercept = 50, linetype="dashed", 
             color = "gray", size=1)


```
:::