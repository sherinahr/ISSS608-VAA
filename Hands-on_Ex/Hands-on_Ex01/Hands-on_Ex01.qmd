---
title: "Hands-on Exercise 1"
author: "Sherinah Rashid"
---

# **A Layered Grammar of Graphics: ggplot2 methods**

# **1.1 Learning Outcome**

In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.

# **1.2 Getting Started**

## 1.2.1 Install and launch R packages

Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.

The code chunk below uses p_load() of pacman package to check if tidyverse package is installed.

```{r}
pacman::p_load(tidyverse)
```

## **1.2.2 Importing the Data**

-   The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, part of the tidyverse package.

```{r}
#| warning: false 
exam_data <-read_csv("data/Exam_data.csv")
```

-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.

    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

# **1.3 Introducing ggplot**

It is an R package for creating data-driven graphics based on The Grammar of Graphics.

It is also part of the tidyverse family specially designed for visual exploration and communication.

For more detail, visit [ggplot2](https://ggplot2.tidyverse.org/)

## **1.3.1 R Graphics vs ggplot**

Let's compare how R Graphics and ggplot a simple histogram.

::: panel-tabset
## R Graphics

```{r}
#| echo: true 
hist(exam_data$MATHS)
```

## ggplot

```{r}
#| echo: true 

library(ggplot2)
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="white", 
                 fill="lightpink2") +
  ggtitle("Distribution of Maths Scores") +theme_classic() 
  
```
:::

As you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?

::: callout-important
The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.
:::

# **1.4 Grammar of Graphics**

Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question -

**What is a statistical graphic?**

In the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph. There are two principles in Grammar of Graphics:

-   Graphics = distinct layers of grammatical elements

-   Meaningful plots through aesthetic mapping

A good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like. However, there will still be many grammatically correct but nonsensical graphics.

## **1.4.1 A Layered Grammar of Graphics**

ggplot2 is an implementation of Leland Wilkinson's Grammar of Graphics. There are seven grammars of ggplot2:

-   **Data**: The dataset being plotted

-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.

-   **Geometrics**: The visual elements used for our data, such as point, bar or line

-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots)

-   **Statistics**, statistical transformations that summarise data (e.g. mean, confidence intervals).

-   **Coordinate systems** define the plane on which data are mapped on the graphic

-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-axis title, or legend background

# **1.5 Essential Grammatical Elements: data**

Let us call the ggplot() function using the code chunk below.

::: callout-note
-   A blank canvas appears.
-   ggplot() initializes a ggplot object.
-   The data argument defines the dataset to be used for plotting.
-   If the dataset is not already a data.frame, it will be converted to one by fortify().
:::

```{r}
ggplot(data=exam_data)
```

# **1.6 Essential Grammatical Elements: Aesthetic Mappings**

The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.

All aesthetics of a plot are specified in the [aes()](https://ggplot2.tidyverse.org/reference/aes.html) function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)

Code chunk below adds the aesthetic element into the plot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

# **1.7 Essential Grammatical Elements: geom**

Geometric objects are the actual marks we put on a plot. Examples include:

-   *geom_point* for drawing individual points (e.g., a scatter plot)

-   *geom_line* for drawing lines (e.g., for a line charts)

-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)

-   *geom_bar* for drawing bars (e.g., for bar charts)

-   *geom_histogram* for drawing binned values (e.g. a histogram)

-   *geom_polygon* for drawing arbitrary shapes

-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

![](Image1.jpg) Things to note:

-   A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.

-   For complete list, please refer [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).

## **1.7.1 Geometric Objects: geom_bar**

The code chunk below plots a bar chart by using [geom_bar()](https://ggplot2.tidyverse.org/reference/geom_bar.html).

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

## **1.7.2 Geometric Objects: geom_dotplot**

In a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.

In the code chunk below, [geom_dotplot()](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) of ggplot2 is used to plot a dot plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)

```

::: {.callout-warning title="Be Careful!"}
The y-axis scale is not very useful and in fact, is very misleading.
:::

::: callout-note
The code chunk below performs the following two steps:

-   `scale_y_continuous()` is used to turn off the y-axis, and

-   *binwidth* argument is used to change the binwidth to 2.5
:::

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL) 

```

## **1.7.3 Geometric Objects: geom_histogram**

In the code chunk below, [geom_histogram()](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in MATHS field of exam_data.

```{r}
#| warning: false
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()       
```

::: callout-note
Note that the default bin is 30.
:::

## **1.7.4 Modifying a geometric object by changing geom**

In the code chunk below:

-   *bins* argument is used to change the number of bins to 20,

-   *fill* argument is used to shade the histogram with pastel blue color,

-   *color* argument is used to change the outline colour of the bars in black, and

-   theme_classic() is used to make the background minimalist.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="white",      
                 fill="slategray1") + theme_classic()   

```

## **1.7.5 Modifying a geometric object by changing aes**

The code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().

```{r}
library(viridis)  
ggplot(data=exam_data, 
       aes(x= MATHS, fill= GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30") +   theme_classic() +
  scale_fill_hue(l=80, c=80)

```

::: callout-note
This approach can be used to colour and fill of the geometric object.
:::

## **1.7.6 Geometric Objects: geom-density**

[geom-density()](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.

It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code below plots the distribution of Maths scores in a kernel density estimate plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()           
```

The code chunk below plots two kernel density lines by using colour or fill arguments of aes().

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density() +
  theme_classic()

```

## **1.7.7 Geometric Objects: geom_boxplot**

[geom_boxplot()](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays the list of continuous values. It visualises five summary statistics (the median, two hinges and two whiskers), and all outlier points individually.

The code chunk below plots boxplots by using geom_boxplot().

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER, fill = GENDER)) +    
  geom_boxplot() + theme_classic() +
  theme(legend.position="none") +
  scale_fill_hue(l=80, c=80)

```

[Notches](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER, fill = GENDER)) +    
  geom_boxplot(notch=TRUE) + theme_classic() +
  theme(legend.position="none") +
  scale_fill_hue(l=80, c=80)

```

## **1.7.8 Geometric Objects: geom_violin**

[geom_violin](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it's easier to compare several distributions since they're placed side by side.

The code below plot the distribution of Maths score by gender in a violin plot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER, fill = GENDER)) +
  geom_violin() + theme_classic() +
  theme(legend.position="none") +
  scale_fill_hue(l=80, c=80)


```

## **1.7.9 Geometric Objects: geom_point**

[geom_point()](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.

The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y = ENGLISH, color=GENDER)) +
  geom_point() + theme_classic()
```

## **1.7.10 geom objects can be combined**

The code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER, fill=GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5) + theme_classic() +
  scale_fill_hue(l=80, c=80)


```

# **1.8 Essential Grammatical Elements: stat**

The [Statistics](https://ggplot2.tidyverse.org/reference/#stats) functions statistically transform data, usually as some form of summary. For example:

-   frequency of values of a variable (bar graph)

    -   Mean

    -   Confidence Limit

-   There are two ways to use these functions:

    -   add a `stat_()` function and override the default geom

    -   add a `geom_()` function and override the default stat

## **1.8.1 Working with stat() - stat_summary method**

The boxplots above in Section 1.7.7 were incomplete because the positions of the means were not shown. The code chunk below adds mean values by using [stat_summary()](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER, fill = GENDER)) +    
  geom_boxplot() + theme_classic() +
  stat_summary(geom = "point",       
               fun ="mean",         
               colour ="black",        
               size=2)+
  theme(legend.position="none") +
  scale_fill_hue(l=80, c=80)

```

## **1.8.2 Working with stat() - geom() method**

The code chunk below adding mean values by using geom() function and overriding the default stat.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER, fill = GENDER)) +    
  geom_boxplot() + theme_classic() +
  geom_point(stat="summary",        
             fun="mean",           
             colour ="black",          
             size=2) +
  theme(legend.position="none") +
  scale_fill_hue(l=80, c=80)

```

## **1.8.3 Adding a best-fit curve on a scatterplot**

The scatterplot above in Section 1.7.9 showed the relationship of Maths and English grades of pupils. The interpretability of the graph can be improved by adding a best fit curve. In the code chunk below, [geom_smooth()](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +
  geom_point() + theme_classic() +
  geom_smooth(linewidth=0.5)

```

::: callout-note
The default method used is loess.
:::

The default smoothing method can be overridden as shown below.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +
  geom_point() + theme_classic() +
  geom_smooth(method=lm, linewidth=0.5)

```

# **1.9 Essential Grammatical Elements: Facets**

Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [facet_grid()](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [facet_wrap](https://ggplot2.tidyverse.org/reference/facet_wrap.html).

## **1.9.1 Working with facet_wrap()**

facet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.The code chunk below plots a trellis plot using facet-wrap().

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, fill="salmon") + theme_classic() +
  facet_wrap(~ CLASS) 
  
```

## **1.9.2 Working with facet_grid()**

facet_grid() forms a matrix of panels defined by row and column variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.The code chunk below plots a trellis plot using facet_grid().

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, fill="salmon") + theme_classic() +
  facet_grid(~ CLASS) 
  
```

# **1.10 Essential Grammatical Elements: Coordinates**

The *Coordinates* functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:

-   [coord_cartesian](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): The default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).

-   [coord_flip](https://ggplot2.tidyverse.org/reference/coord_flip.html): A cartesian system with the x and y flipped.

-   [coord_fixed](https://ggplot2.tidyverse.org/reference/coord_fixed.html): A cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).

-   [coord_quickmap](https://ggplot2.tidyverse.org/reference/coord_map.html): A coordinate system that approximates a good aspect ratio for maps.

## **1.10.1 Working with Coordinate**

By default, the bar chart of ggplot2 is in vertical form. Adding coord_flip() flips the horizontal bar chart into a vertical bar chart.

```{r}
ggplot(data = exam_data, 
       aes(x = RACE, fill= RACE)) + 
  geom_bar() +
  xlab ("Race") +
  ylab("Number of Students") +
  scale_fill_brewer(palette="Pastel2") +
  theme_classic() + 
  coord_flip()
```

## **1.10.2 Changing the y- and x-axis range**

The scatterplot in Section 1.7.9 is slightly misleading because the y-axis and x-axis ranges are not equal. See below for the amended code block.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y = ENGLISH, fill = GENDER)) +
  geom_point() + theme_classic() +
  geom_smooth(method=lm, linewidth=0.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

# **1.11 Essential Grammatical Elements: themes**

There are various themes which can be used to change the appearance of the charts. The charts thus far have used the theme_classic().

Other possible options are theme_gray() and theme_minimal(), as below:

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) + 
  geom_bar() +
  xlab ("Race") +
  ylab("Number of Students") +
  theme_gray() + 
  coord_flip() +
  ggtitle("Theme_Gray")
```

```{r}
ggplot(data = exam_data, 
       aes(x = RACE)) + 
  geom_bar() +
  xlab ("Race") +
  ylab("Number of Students") +
  theme_minimal() + 
  coord_flip() +
  ggtitle("Theme_Minimal")
```

# **1.12 References**

-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.

-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.

-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version.

-   [Learning ggplot2 on Paper -- Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)

-   [Learning ggplot2 on Paper -- Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)

-   [Learning ggplot2 on Paper -- Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)
